{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nfarmOS is a web-based application for farm management, planning, and record\nkeeping.\n\n\nIt is built on \nDrupal\n, which makes it \nmodular\n, \nextensible\n, and \nsecure\n.\nBoth Drupal and farmOS are licensed under the \nGNU General Public License\n,\nwhich means they are \nopen source\n.\n\n\nFor more information, read through some of the \nFrequently Asked Questions\n.\n\n\nStatus\n\n\nfarmOS is under active development, but is still relatively new. The focus right\nnow is laying a strong \ngroundwork\n, so that others can more easily join in and\n\ncontribute\n.\n\n\nQuick Links\n\n\n\n\nDrupal.org: \nhttps://drupal.org/project/farm\n\n\nGithub: \nhttps://github.com/farmOS\n\n\nMonthly call: \nGoogle Hangout\n (2nd Wed of the month at 1pm Eastern)\n\n\nIRC: \n#farmOS on Freenode\n\n\nTwitter: \n@farmOSorg\n\n\nTwitter: \n@getFarmier\n\n\n\n\nMotivations\n\n\nIn this video by Chris Callahan at \nUVM Extension\n's\n\nAgricultural Engineering Program\n, Michael Stenta provides an overview of the\nmotivations behind farmOS.  Why he started the project, why he uses Drupal as\nthe development framework and why it is open-source. Available on YouTube:\n\nhttps://youtu.be/ATUEWrlDbWw\n\n\n\n\n\nGODAN Documentary Web Series\n\n\nfarmOS was featured in the \nGODAN Documentary Web Series: \"OPEN FARMS\"\n,\navailable on YouTube: \nhttps://youtu.be/bCOqg5iH6fM\n\n\n\n\n\nCNBC Special\n\n\nfarmOS was featured in a CNBC special:\n\nCNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers\n.\n\n\n\n\n\n2016 NOFA Summer Conference\n\n\nMichael Stenta presented a farmOS workshop at the 2016 \nNOFA Summer Conference\n.\nIt covers the core features of farmOS, how to get started, where to find help,\nand how to contribute back to the project.\n\n\nThe full workshop recording is available on YouTube:\n\nhttps://youtu.be/w0ZCu8NsWKE\n\n\n\n\n\n@farmOSorg on Twitter\n\n\n@farmOSorg", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "farmOS is a web-based application for farm management, planning, and record\nkeeping.  It is built on  Drupal , which makes it  modular ,  extensible , and  secure .\nBoth Drupal and farmOS are licensed under the  GNU General Public License ,\nwhich means they are  open source .  For more information, read through some of the  Frequently Asked Questions .", 
            "title": "Overview"
        }, 
        {
            "location": "/#status", 
            "text": "farmOS is under active development, but is still relatively new. The focus right\nnow is laying a strong  groundwork , so that others can more easily join in and contribute .", 
            "title": "Status"
        }, 
        {
            "location": "/#quick-links", 
            "text": "Drupal.org:  https://drupal.org/project/farm  Github:  https://github.com/farmOS  Monthly call:  Google Hangout  (2nd Wed of the month at 1pm Eastern)  IRC:  #farmOS on Freenode  Twitter:  @farmOSorg  Twitter:  @getFarmier", 
            "title": "Quick Links"
        }, 
        {
            "location": "/#motivations", 
            "text": "In this video by Chris Callahan at  UVM Extension 's Agricultural Engineering Program , Michael Stenta provides an overview of the\nmotivations behind farmOS.  Why he started the project, why he uses Drupal as\nthe development framework and why it is open-source. Available on YouTube: https://youtu.be/ATUEWrlDbWw", 
            "title": "Motivations"
        }, 
        {
            "location": "/#godan-documentary-web-series", 
            "text": "farmOS was featured in the  GODAN Documentary Web Series: \"OPEN FARMS\" ,\navailable on YouTube:  https://youtu.be/bCOqg5iH6fM", 
            "title": "GODAN Documentary Web Series"
        }, 
        {
            "location": "/#cnbc-special", 
            "text": "farmOS was featured in a CNBC special: CNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers .", 
            "title": "CNBC Special"
        }, 
        {
            "location": "/#2016-nofa-summer-conference", 
            "text": "Michael Stenta presented a farmOS workshop at the 2016  NOFA Summer Conference .\nIt covers the core features of farmOS, how to get started, where to find help,\nand how to contribute back to the project.  The full workshop recording is available on YouTube: https://youtu.be/w0ZCu8NsWKE", 
            "title": "2016 NOFA Summer Conference"
        }, 
        {
            "location": "/#farmosorg-on-twitter", 
            "text": "@farmOSorg", 
            "title": "@farmOSorg on Twitter"
        }, 
        {
            "location": "/guide/", 
            "text": "farmOS User Guide\n\n\nIntroduction\n\n\nWelcome to the official farmOS user guide. These documents are intended for\npeople who will be using farmOS for record keeping and farm management.\n\n\nIf you are looking for information about hosting farmOS, or contributing to\nthe devlopment, refer to the dedicated documentation on those topics:\n\n\n\n\nHosting farmOS\n\n\nContributing to farmOS\n\n\n\n\nLogging in\n\n\nThe first step to using farmOS is logging in. All records are private by\ndefault, and can only be viewed people with a username and password.\n\n\nTo log in, first you need to know the address of your farmOS site. If you are\nhosting farmOS on \nFarmier\n, this address will most likely be something like\n\nhttps://myfarm.farmos.net\n (where \nmyfarm\n is the name of your farm). If your\nfarmOS is hosted by someone else, they will be able to point you to the correct\nURL.\n\n\nEnter the URL into the web browser on your computer, phone, or tablet, and you\nshould see a login form. Enter your username and password, and click \"Log in\"\nto begin using farmOS.\n\n\nDashboard\n\n\nThe first thing you will see when you log in is the farmOS dashboard.\n\n\nOn the left is the farm map, where you will see any areas that you have\nmapped. You can use this to navigate to records within farmOS by clicking on\nan area and then clicking on the available links within the area popup.\n\n\nOn the right are the todo lists. The \"Plan\" shows all upcoming tasks that need\nto be done. If you miss a task, a \"Late tasks\" list will also be displayed\nunderneath.\n\n\n\n  \n\n\n\n\n\nNavigation\n\n\nfarmOS is designed to make your records approachable from multiple angles, so\nit is easy to find records you made in the past, and add new ones in the\nfuture.\n\n\nThe main menu at the top provides direct links to the 4 main types of records:\n\n\n\n\nAreas\n - Places on or off the farm\n\n\nAssets\n - Things of value that you are managing\n\n\nLogs\n - Events that are related to areas, assets, and people\n\n\nPeople\n - People with logins to farmOS\n\n\n\n\nThese pages will list all areas, assets, logs, or people within the system.\nFilter and sort options allow you to narrow down the lists to find the record\nyou're looking for.\n\n\nYou can also use the map to navigate to records that relate to specific areas.\nFor example, if you want to view the record for a specific planting, you can\nclick on the field in the map where the planting is and you will see all assets\nin that field.\n\n\nIf you are looking for a specific log, you can either find it via the \"Logs\"\nmain menu (and submenus), or you can find the area or asset that the log is\nassociated with, and the log will appear there as well.\n\n\nAll your records can be connected and related in this way to make navigating\nthem easier.", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/#farmos-user-guide", 
            "text": "", 
            "title": "farmOS User Guide"
        }, 
        {
            "location": "/guide/#introduction", 
            "text": "Welcome to the official farmOS user guide. These documents are intended for\npeople who will be using farmOS for record keeping and farm management.  If you are looking for information about hosting farmOS, or contributing to\nthe devlopment, refer to the dedicated documentation on those topics:   Hosting farmOS  Contributing to farmOS", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/#logging-in", 
            "text": "The first step to using farmOS is logging in. All records are private by\ndefault, and can only be viewed people with a username and password.  To log in, first you need to know the address of your farmOS site. If you are\nhosting farmOS on  Farmier , this address will most likely be something like https://myfarm.farmos.net  (where  myfarm  is the name of your farm). If your\nfarmOS is hosted by someone else, they will be able to point you to the correct\nURL.  Enter the URL into the web browser on your computer, phone, or tablet, and you\nshould see a login form. Enter your username and password, and click \"Log in\"\nto begin using farmOS.", 
            "title": "Logging in"
        }, 
        {
            "location": "/guide/#dashboard", 
            "text": "The first thing you will see when you log in is the farmOS dashboard.  On the left is the farm map, where you will see any areas that you have\nmapped. You can use this to navigate to records within farmOS by clicking on\nan area and then clicking on the available links within the area popup.  On the right are the todo lists. The \"Plan\" shows all upcoming tasks that need\nto be done. If you miss a task, a \"Late tasks\" list will also be displayed\nunderneath.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/guide/#navigation", 
            "text": "farmOS is designed to make your records approachable from multiple angles, so\nit is easy to find records you made in the past, and add new ones in the\nfuture.  The main menu at the top provides direct links to the 4 main types of records:   Areas  - Places on or off the farm  Assets  - Things of value that you are managing  Logs  - Events that are related to areas, assets, and people  People  - People with logins to farmOS   These pages will list all areas, assets, logs, or people within the system.\nFilter and sort options allow you to narrow down the lists to find the record\nyou're looking for.  You can also use the map to navigate to records that relate to specific areas.\nFor example, if you want to view the record for a specific planting, you can\nclick on the field in the map where the planting is and you will see all assets\nin that field.  If you are looking for a specific log, you can either find it via the \"Logs\"\nmain menu (and submenus), or you can find the area or asset that the log is\nassociated with, and the log will appear there as well.  All your records can be connected and related in this way to make navigating\nthem easier.", 
            "title": "Navigation"
        }, 
        {
            "location": "/guide/areas/", 
            "text": "Mapping your farm\n\n\nfarmOS gives you the ability to organize all of the various places on (and off)\nyour farm. These places are referred to as \"Areas\" in farmOS, and they can be\nreferenced when you are \nlogging events\n. They are specifically useful in\nmovement logs for \nsetting location of assets\n.\n\n\nTo create an area, go to the Farm Dashboard and click the \"Add an area\" button.\nThis will take you to a form for defining an area. Here is a quick overview of\nthe fields available to you when you are describing an area:\n\n\n\n\nName\n - The first (and only) thing an area needs is a name. All the other\n  fields are optional.\n\n\nArea type\n - farmOS uses the concept of \"area type\" to organize and\n  color-code areas on a map. Some of the types available include: Property,\n  Building, Field, and Water. The area type field is not required, but if you do\n  not use it then the area will not be displayed on the main map.\n\n\nGeometry\n - The Geometry field lets you draw your area on a map, using\n  points, lines, and polygons (see a more detailed description below).\n\n\nDescription\n - This is a simple text tield that you can use to describe\n  each area in further detail. It can be used to take notes, but it is\n  recommended that any activities be recorded using logs instead, because they\n  have a timestamp associated with them.\n\n\nPhoto(s)\n - This field lets you attach photos to your area.\n\n\nFiles\n - This field lets you attach files to your area. You can also use\n  this to upload KML files and automatically import them into the Geometry field\n  above (see more information below).\n\n\nRelations\n - The \"Parent\" and \"Weight\" fields let you define a hierarchy\n  and order to your areas. You can edit these fields individually on each area,\n  or you can use the drag-and-drop hierarchy editor - which is much easier for\n  moving a lot of areas around at once (more details below).\n\n\n\n\nUsing geometry fields\n\n\nHere are some common things you will do with the geometry fields in farmOS:\n\n\nZooming\n\n\nThere are four ways to zoom in/out:\n\n\n\n\nOn touch screens, you can \"pinch zoom\" using two fingers.\n\n\nWith a computer mouse, you can use the scroll wheel to zoom in/out.\n\n\nThe plus (+) and minus (+) buttons in the top left of the map control zoom.\n\n\nThere is a \"Geolocate\" button in the upper left (looks like a bullseye) that\n   will automatically zoom in to your current location. On a computer this will\n   use your IP address, and on a mobile device it will use your GPS.\n\n\n\n\nDrawing\n\n\nThere are four buttons for drawing shapes:\n\n\n\n\nPoint\n: Click on the map to create a point.\n\n\nLine\n: Create a series of line segments by clicking points on the map, and\n   double-clicking when you're done. You can also hold shift to draw freehand.\n\n\nCircle\n: Create a circle by clicking where you want the center to be,\n   dragging the circle outward to expand it, and clicking again to finish.\n\n\nPolygon\n: A polygon works the same as a line, except it will create a\n   closed shape at the end, whereas a line will not be filled in.\n\n\n\n\n\n  \n\n\n\n\n\nModifying\n\n\nThere are three buttons for modifying shapes:\n\n\n\n\nEdit\n: Click the edit button, and then click a shape to select it. You can\n   click and drag any of the vertices to modify the overall shape.\n\n\nMove\n: Click the edit button, and then click a shape to select it. Then\n   click and drag the shape to move it to a different position.\n\n\nClear\n: The clear button will clear ALL shapes from the map. If you do\n   accidentally click this, refresh the page WITHOUT saving, and you will revert\n   to the previously saved shapes. Note that this will also revert any other\n   changes to your area that you haven't saved.\n\n\n\n\nImporting a KML file\n\n\nKML files are special shape files that define a geometry on a map. They can be\ncreated with various GIS/mapping software. If you already have your farm mapped\nin another software (like \nGoogle Earth\n), you can export KML files for each\narea and then import them into farmOS's geometry fields.\n\n\nTo import a KML file, follow these steps:\n\n\n\n\nCreate a new area (or edit an existing one).\n\n\nScroll down to the Files field and upload your KML file.\n\n\nScroll up to the Geometry field, and just below the map you will see a button\n   labeled \"Find using Files field\". If you uploaded a valid KML file, you will\n   see the shape(s) appear in the map.\n\n\n\n\n\n  \n\n\n\n\n\nRemember to save!\n\n\nWhen you're done modifying your area, remember to click the Save button at the\nbottom of the page to save your changes.\n\n\nOrganizing areas hierarchically\n\n\nThere are two ways to arrange areas hierarchically in farmOS:\n\n\n\n\nWhen you are editing an individual area, click \"Relations\" at the bottom and\n   use the \"Parent\" and \"Weight\" values to define the area's relationship to\n   other areas.\n\n\nOr, you can click and drag all your areas at once into a hierachal list. To\n   do this, click on the Areas link in the main menu, and in the right column\n   you will see a list of all your areas with a heading of \"Hierachy (change)\".\n   Click \"(change)\" to be brought to the hierarchy editor. Click and drag the\n   areas up and down, and left and right to arrange them how you want, and then\n   click \"Save\" at the bottom of the page.\n\n\n\n\n\n  \n\n\n\n\n\nGenerate beds\n\n\nfarmOS includes a special \"Area Generator\" module that makes it easy to\nautomatically generate a whole bunch of areas in bulk. The original goal was to\nmake it easier to generate parallel beds within a field, but it may provide\nadditional possibilities in the future.\n\n\nTo use the area generator to generate beds, follow these steps:\n\n\n\n\nGo to the \"Areas\" page (from the main menu) and click the \"Area generator\"\n   tab.\n\n\nSelect the field that the beds will be created within.\n\n\nSet the \"Area type\" to \"Bed\".\n\n\nEnter the number of beds that should be generated within the field.\n\n\nSet the orientation of the beds, and use the \"Preview\" button to see how\n   they look.\n\n\nWhen you are satisfied with the preview, click the \"Generate\" button to\n   generate the beds.\n\n\n\n\nBeds will be numbered and labeled using the parent area's name.", 
            "title": "Mapping your farm"
        }, 
        {
            "location": "/guide/areas/#mapping-your-farm", 
            "text": "farmOS gives you the ability to organize all of the various places on (and off)\nyour farm. These places are referred to as \"Areas\" in farmOS, and they can be\nreferenced when you are  logging events . They are specifically useful in\nmovement logs for  setting location of assets .  To create an area, go to the Farm Dashboard and click the \"Add an area\" button.\nThis will take you to a form for defining an area. Here is a quick overview of\nthe fields available to you when you are describing an area:   Name  - The first (and only) thing an area needs is a name. All the other\n  fields are optional.  Area type  - farmOS uses the concept of \"area type\" to organize and\n  color-code areas on a map. Some of the types available include: Property,\n  Building, Field, and Water. The area type field is not required, but if you do\n  not use it then the area will not be displayed on the main map.  Geometry  - The Geometry field lets you draw your area on a map, using\n  points, lines, and polygons (see a more detailed description below).  Description  - This is a simple text tield that you can use to describe\n  each area in further detail. It can be used to take notes, but it is\n  recommended that any activities be recorded using logs instead, because they\n  have a timestamp associated with them.  Photo(s)  - This field lets you attach photos to your area.  Files  - This field lets you attach files to your area. You can also use\n  this to upload KML files and automatically import them into the Geometry field\n  above (see more information below).  Relations  - The \"Parent\" and \"Weight\" fields let you define a hierarchy\n  and order to your areas. You can edit these fields individually on each area,\n  or you can use the drag-and-drop hierarchy editor - which is much easier for\n  moving a lot of areas around at once (more details below).", 
            "title": "Mapping your farm"
        }, 
        {
            "location": "/guide/areas/#using-geometry-fields", 
            "text": "Here are some common things you will do with the geometry fields in farmOS:", 
            "title": "Using geometry fields"
        }, 
        {
            "location": "/guide/areas/#zooming", 
            "text": "There are four ways to zoom in/out:   On touch screens, you can \"pinch zoom\" using two fingers.  With a computer mouse, you can use the scroll wheel to zoom in/out.  The plus (+) and minus (+) buttons in the top left of the map control zoom.  There is a \"Geolocate\" button in the upper left (looks like a bullseye) that\n   will automatically zoom in to your current location. On a computer this will\n   use your IP address, and on a mobile device it will use your GPS.", 
            "title": "Zooming"
        }, 
        {
            "location": "/guide/areas/#drawing", 
            "text": "There are four buttons for drawing shapes:   Point : Click on the map to create a point.  Line : Create a series of line segments by clicking points on the map, and\n   double-clicking when you're done. You can also hold shift to draw freehand.  Circle : Create a circle by clicking where you want the center to be,\n   dragging the circle outward to expand it, and clicking again to finish.  Polygon : A polygon works the same as a line, except it will create a\n   closed shape at the end, whereas a line will not be filled in.", 
            "title": "Drawing"
        }, 
        {
            "location": "/guide/areas/#modifying", 
            "text": "There are three buttons for modifying shapes:   Edit : Click the edit button, and then click a shape to select it. You can\n   click and drag any of the vertices to modify the overall shape.  Move : Click the edit button, and then click a shape to select it. Then\n   click and drag the shape to move it to a different position.  Clear : The clear button will clear ALL shapes from the map. If you do\n   accidentally click this, refresh the page WITHOUT saving, and you will revert\n   to the previously saved shapes. Note that this will also revert any other\n   changes to your area that you haven't saved.", 
            "title": "Modifying"
        }, 
        {
            "location": "/guide/areas/#importing-a-kml-file", 
            "text": "KML files are special shape files that define a geometry on a map. They can be\ncreated with various GIS/mapping software. If you already have your farm mapped\nin another software (like  Google Earth ), you can export KML files for each\narea and then import them into farmOS's geometry fields.  To import a KML file, follow these steps:   Create a new area (or edit an existing one).  Scroll down to the Files field and upload your KML file.  Scroll up to the Geometry field, and just below the map you will see a button\n   labeled \"Find using Files field\". If you uploaded a valid KML file, you will\n   see the shape(s) appear in the map.", 
            "title": "Importing a KML file"
        }, 
        {
            "location": "/guide/areas/#remember-to-save", 
            "text": "When you're done modifying your area, remember to click the Save button at the\nbottom of the page to save your changes.", 
            "title": "Remember to save!"
        }, 
        {
            "location": "/guide/areas/#organizing-areas-hierarchically", 
            "text": "There are two ways to arrange areas hierarchically in farmOS:   When you are editing an individual area, click \"Relations\" at the bottom and\n   use the \"Parent\" and \"Weight\" values to define the area's relationship to\n   other areas.  Or, you can click and drag all your areas at once into a hierachal list. To\n   do this, click on the Areas link in the main menu, and in the right column\n   you will see a list of all your areas with a heading of \"Hierachy (change)\".\n   Click \"(change)\" to be brought to the hierarchy editor. Click and drag the\n   areas up and down, and left and right to arrange them how you want, and then\n   click \"Save\" at the bottom of the page.", 
            "title": "Organizing areas hierarchically"
        }, 
        {
            "location": "/guide/areas/#generate-beds", 
            "text": "farmOS includes a special \"Area Generator\" module that makes it easy to\nautomatically generate a whole bunch of areas in bulk. The original goal was to\nmake it easier to generate parallel beds within a field, but it may provide\nadditional possibilities in the future.  To use the area generator to generate beds, follow these steps:   Go to the \"Areas\" page (from the main menu) and click the \"Area generator\"\n   tab.  Select the field that the beds will be created within.  Set the \"Area type\" to \"Bed\".  Enter the number of beds that should be generated within the field.  Set the orientation of the beds, and use the \"Preview\" button to see how\n   they look.  When you are satisfied with the preview, click the \"Generate\" button to\n   generate the beds.   Beds will be numbered and labeled using the parent area's name.", 
            "title": "Generate beds"
        }, 
        {
            "location": "/guide/logs/", 
            "text": "Logging events\n\n\nLogs are records of all kinds of events. You can be as granular as you want: the\nmore information you're recording, the more you can look back on and learn from\nin the future.\n\n\n\n  \n\n\n\n\n\nCalendar\n\n\nIn addition to the standard lists by log type, you can also view all logs in\na calendar format. This is available via the main menu, next to \"My Account\",\nor directly at \nfarm/calendar\n. Month, week, day, and year views are all\navailable.\n\n\nStandard log types\n\n\nThere are a number of different type of logs in farmOS - each with it's own\npurpose and set of fields. Some of the general log types are described below,\nbut there are also other log types that pertain to specific \nasset types\n.\n\n\nActivities\n\n\nActivities are a sort of catch-all, or default, log type, which can be used for\ngeneral planning and recordkeeping of activities that don't fit any of the\nother, more specific, log types.\n\n\nObservations\n\n\nObservations are used to record any kind of passive observation on the farm. For\nexample, seeing that a planting has germinated is an observation. This is a very\nflexible log type that can be used for a lot of different things. It comes with\nit's own \"Observation Type\" vocabulary for defining your own custom\ncategorizations.\n\n\nInputs\n\n\nInput logs are used to record resources that are put into an asset. Fertlizer\n(for plantings) or feed (for animals) can be recorded with input logs.\n\n\nHarvests\n\n\nHarvest logs are used to record harvests.\n\n\nOther log types\n\n\nIn addition to the standard log types described above, there are a few other\ntypes provided for specific purposes. Note that these log types are provided by\nmodules that may not be turned on by default in your farmOS. If you do not see\nthese types in your farmOS, turn on the applicable module (or ask you farmOS\nhost to do so for you).\n\n\nSoil tests\n\n\nSoil test logs can be used to record when you have a soil test performed. They\ncan be linked to a specific field or area, and you can specify the exact points\non a map where samples were taken from. Integration is also provided with the\nUS NRCS Soil Survey API, which allows you to view soil type map overlays, as\nwell as look up soil name for the specific sample points in your soil tests.\n\n\n\n  \n\n\n\n\n\nWater tests\n\n\nWater test logs can be used to record when you have a water test performed.\nSimilar to soil test logs, they can be linked to a specific field or area, and\nyou can specify the lab that performed the test. Some regulatory guidelines\nrequire that water tests are taken for both field and pack house water sources.\n\n\nSales\n\n\nSale logs provide the ability to record the sale of specific assets. You can\nspecify quantity sold, unit price, total price, customer, and invoice number.\nSales logs can only represent the sale of a single item, and are not intended\nfor use as multi-item invoices. The primary purpose of sale logs is to connect\nthe final dots for food traceability.\n\n\nLog features\n\n\nTask assignment\n\n\nLogs can be assigned to one or more person(s) in farmOS using the log's \nOwner\n\nfield. Users can view a list of all logs assigned to them by clicking\n\"My Account\" in the menu and then selecting the \"Logs\" tab of their user\nprofile.\n\n\nCategorization\n\n\nLogs can be assigned to one or more categories. A set of pre-defined categories\nare provided by farmOS, and more can be added by users. Log categories enable\nyou to organize, sort, and filter your logs in ways that make sense to you, so\nyou can find the logs you need easily in the future.", 
            "title": "Logging events"
        }, 
        {
            "location": "/guide/logs/#logging-events", 
            "text": "Logs are records of all kinds of events. You can be as granular as you want: the\nmore information you're recording, the more you can look back on and learn from\nin the future.", 
            "title": "Logging events"
        }, 
        {
            "location": "/guide/logs/#calendar", 
            "text": "In addition to the standard lists by log type, you can also view all logs in\na calendar format. This is available via the main menu, next to \"My Account\",\nor directly at  farm/calendar . Month, week, day, and year views are all\navailable.", 
            "title": "Calendar"
        }, 
        {
            "location": "/guide/logs/#standard-log-types", 
            "text": "There are a number of different type of logs in farmOS - each with it's own\npurpose and set of fields. Some of the general log types are described below,\nbut there are also other log types that pertain to specific  asset types .", 
            "title": "Standard log types"
        }, 
        {
            "location": "/guide/logs/#activities", 
            "text": "Activities are a sort of catch-all, or default, log type, which can be used for\ngeneral planning and recordkeeping of activities that don't fit any of the\nother, more specific, log types.", 
            "title": "Activities"
        }, 
        {
            "location": "/guide/logs/#observations", 
            "text": "Observations are used to record any kind of passive observation on the farm. For\nexample, seeing that a planting has germinated is an observation. This is a very\nflexible log type that can be used for a lot of different things. It comes with\nit's own \"Observation Type\" vocabulary for defining your own custom\ncategorizations.", 
            "title": "Observations"
        }, 
        {
            "location": "/guide/logs/#inputs", 
            "text": "Input logs are used to record resources that are put into an asset. Fertlizer\n(for plantings) or feed (for animals) can be recorded with input logs.", 
            "title": "Inputs"
        }, 
        {
            "location": "/guide/logs/#harvests", 
            "text": "Harvest logs are used to record harvests.", 
            "title": "Harvests"
        }, 
        {
            "location": "/guide/logs/#other-log-types", 
            "text": "In addition to the standard log types described above, there are a few other\ntypes provided for specific purposes. Note that these log types are provided by\nmodules that may not be turned on by default in your farmOS. If you do not see\nthese types in your farmOS, turn on the applicable module (or ask you farmOS\nhost to do so for you).", 
            "title": "Other log types"
        }, 
        {
            "location": "/guide/logs/#soil-tests", 
            "text": "Soil test logs can be used to record when you have a soil test performed. They\ncan be linked to a specific field or area, and you can specify the exact points\non a map where samples were taken from. Integration is also provided with the\nUS NRCS Soil Survey API, which allows you to view soil type map overlays, as\nwell as look up soil name for the specific sample points in your soil tests.", 
            "title": "Soil tests"
        }, 
        {
            "location": "/guide/logs/#water-tests", 
            "text": "Water test logs can be used to record when you have a water test performed.\nSimilar to soil test logs, they can be linked to a specific field or area, and\nyou can specify the lab that performed the test. Some regulatory guidelines\nrequire that water tests are taken for both field and pack house water sources.", 
            "title": "Water tests"
        }, 
        {
            "location": "/guide/logs/#sales", 
            "text": "Sale logs provide the ability to record the sale of specific assets. You can\nspecify quantity sold, unit price, total price, customer, and invoice number.\nSales logs can only represent the sale of a single item, and are not intended\nfor use as multi-item invoices. The primary purpose of sale logs is to connect\nthe final dots for food traceability.", 
            "title": "Sales"
        }, 
        {
            "location": "/guide/logs/#log-features", 
            "text": "", 
            "title": "Log features"
        }, 
        {
            "location": "/guide/logs/#task-assignment", 
            "text": "Logs can be assigned to one or more person(s) in farmOS using the log's  Owner \nfield. Users can view a list of all logs assigned to them by clicking\n\"My Account\" in the menu and then selecting the \"Logs\" tab of their user\nprofile.", 
            "title": "Task assignment"
        }, 
        {
            "location": "/guide/logs/#categorization", 
            "text": "Logs can be assigned to one or more categories. A set of pre-defined categories\nare provided by farmOS, and more can be added by users. Log categories enable\nyou to organize, sort, and filter your logs in ways that make sense to you, so\nyou can find the logs you need easily in the future.", 
            "title": "Categorization"
        }, 
        {
            "location": "/guide/assets/", 
            "text": "Managing assets\n\n\nAll the important and valuable things on your farm are represented as \"assets\"\nin farmOS. Assets include Plantings, Animals, Equipment, etc.\n\n\nAssets are organized into different sections in the farmOS interface, and can\nbe accessed from the main menu. You can add assets from within each asset type's\ndashboard.\n\n\n\n  \n\n\n\n\n\nAsset fields\n\n\nEach asset type will have it's own set of fields, but some of the common ones\ninclude:\n\n\n\n\nName\n (required) - The name of the asset.\n\n\nLocation\n - This is actually not a real field. It is a shortcut for\n  creating a log that assigns the asset to a location. For more information see\n  \nMovements and location\n.\n\n\nPhotos\n - This field lets you attach photos to your asset.\n\n\nDescription\n - This is a simple text tield that you can use to describe\n  each asset in further detail. It can be used to take notes, but it is\n  recommended that any activities be recorded using logs instead, because they\n  have a timestamp associated with them.\n\n\n\n\nAsset cluster maps\n\n\nIn the dashboard of each asset, there is an \"asset cluster map\" that displays\ncounts of assets in a map, along with the geometries of their locations.\n\n\nThey are called \"cluster\" maps because they use a feature of the\n\nOpenlayers mapping library\n called a \"Cluster source\". This means that the\nlocation of all assets of a particular type (eg: animals) are loaded into a map\nat once, and they are \"clustered\" into points based on their proximity to one\nanother.\n\n\nSo if you have 20 animals all within the same relative area, you will see a\nsingle point with a \"20\" on it. You can click on that point to see a list of the\nanimals, and if you zoom in, that point will automatically break up into\nmultiple other cluster points, showing more precise locations.\n\n\nHere's a little more nitty-gritty on how this works: logs are used to record\nthe \nlocation of assets in farmOS\n, along with a geometry field for storing\nprecise geodata about location. This geometry is being loaded into cluster maps\ntwice. The first is to draw the actual geometry of the asset location. And the\nsecond is to generate the cluster points. The points themselves are just the\n\"centroid\" of the geometry itself - which basically means it's the average\ncenterpoint, represented in latitude and longitude. So by displaying both the\nactual geometry, and the centroid points, you're able to get a very nice\noverview of exactly where assets are on your farm. Pretty cool huh?\n\n\nArchiving assets\n\n\nAssets can be marked as \"active\" or \"inactive\". Inactive assets will not show up\nin farmOS unless you specifically want to see them. So for example, when you are\ndone harvesting a planting, you can mark it as \"inactive\" to archive it.", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/assets/#managing-assets", 
            "text": "All the important and valuable things on your farm are represented as \"assets\"\nin farmOS. Assets include Plantings, Animals, Equipment, etc.  Assets are organized into different sections in the farmOS interface, and can\nbe accessed from the main menu. You can add assets from within each asset type's\ndashboard.", 
            "title": "Managing assets"
        }, 
        {
            "location": "/guide/assets/#asset-fields", 
            "text": "Each asset type will have it's own set of fields, but some of the common ones\ninclude:   Name  (required) - The name of the asset.  Location  - This is actually not a real field. It is a shortcut for\n  creating a log that assigns the asset to a location. For more information see\n   Movements and location .  Photos  - This field lets you attach photos to your asset.  Description  - This is a simple text tield that you can use to describe\n  each asset in further detail. It can be used to take notes, but it is\n  recommended that any activities be recorded using logs instead, because they\n  have a timestamp associated with them.", 
            "title": "Asset fields"
        }, 
        {
            "location": "/guide/assets/#asset-cluster-maps", 
            "text": "In the dashboard of each asset, there is an \"asset cluster map\" that displays\ncounts of assets in a map, along with the geometries of their locations.  They are called \"cluster\" maps because they use a feature of the Openlayers mapping library  called a \"Cluster source\". This means that the\nlocation of all assets of a particular type (eg: animals) are loaded into a map\nat once, and they are \"clustered\" into points based on their proximity to one\nanother.  So if you have 20 animals all within the same relative area, you will see a\nsingle point with a \"20\" on it. You can click on that point to see a list of the\nanimals, and if you zoom in, that point will automatically break up into\nmultiple other cluster points, showing more precise locations.  Here's a little more nitty-gritty on how this works: logs are used to record\nthe  location of assets in farmOS , along with a geometry field for storing\nprecise geodata about location. This geometry is being loaded into cluster maps\ntwice. The first is to draw the actual geometry of the asset location. And the\nsecond is to generate the cluster points. The points themselves are just the\n\"centroid\" of the geometry itself - which basically means it's the average\ncenterpoint, represented in latitude and longitude. So by displaying both the\nactual geometry, and the centroid points, you're able to get a very nice\noverview of exactly where assets are on your farm. Pretty cool huh?", 
            "title": "Asset cluster maps"
        }, 
        {
            "location": "/guide/assets/#archiving-assets", 
            "text": "Assets can be marked as \"active\" or \"inactive\". Inactive assets will not show up\nin farmOS unless you specifically want to see them. So for example, when you are\ndone harvesting a planting, you can mark it as \"inactive\" to archive it.", 
            "title": "Archiving assets"
        }, 
        {
            "location": "/guide/assets/plantings/", 
            "text": "Plantings\n\n\nfarmOS can be used for very fine-grained crop planning and record keeping. It\ncan be used by large or small operations, nurseries, seed producers, breeders,\nand home gardeners.\n\n\nThe asset type used to manage crops is called a \nPlanting\n.\n\n\nPlantings can be used to represent groups of plants (eg: a field of corn, or a\ngroup of seedlings), or it can be used to represent individual plants (eg: in\nthe case of nurseries).\n\n\nCrops/varieties\n\n\nWhen you create a planting asset, you will need to define what \ncrop/variety\n\nit is. Crops/varieties represent the various \ntypes\n of plantings you grow.\nThese can be very general crop names (eg: \"Broccoli\") or very specific breeds\nor varieties (eg: \"Belstar F1 Organic Broccoli\").\n\n\nPlantings are the specific asset you are growing, whereas crops/varieties are\nused to categorize and define planting types. You may have multiple plantings\nof the same crop/variety. Consider the following example:\n\n\n\n\n1 pound of red lettuce seed was purchased and seeded 4 times over the course\nof 8 weeks (every two weeks).\n\n\n\n\nIn this example, there would be 4 planting assets with a crop/variety of \"Red\nlettuce\":\n\n\n\n\n2017 Red lettuce planting 1\n\n\n2017 Red lettuce planting 2\n\n\n2017 Red lettuce planting 3\n\n\n2017 Red lettuce planting 4\n\n\n\n\nThe way you name your plantings is up to you - this is just an example.\nIncluding the year at the beginning and the planting number at the end is\nhelpful when you are looking at long lists of plantings.\n\n\nPlanting logs\n\n\nIn addition to the standard \nlog types\n that all farmOS assets share\n(activities, observations, inputs, and harvests), there are two log types that\nare specific to plantings: seedings and transplantings.\n\n\nSeeding\n logs represent when seeds were planted in the ground or in\ncontainers. With a seeding log, you can specify the seeding quantity (eg: 100\nlbs, 20 72-plug trays, etc), and you can specify where the seeding occurred\n(using the \nmovement fields\n) so that farmOS knows where the planting asset is\nlocated.\n\n\nTransplanting\n logs represent when a planting was transplanted from one\nplace to another. Similar to seeding logs, transplantings can have a quantity\nand a location.\n\n\nIf you are direct seeding into the field, you may only use the seeding log. If\nyou are purchasing starts from another grower, you may only use the\ntransplanting log. If you are starting your plantings in a greenhouse and then\nplanting them out in the field, you may use both a seeding and transplanting\nlog.\n\n\nPlanting plan\n\n\nWhen you add a new planting, you will see a special \"Plan\" fieldset, which lets\nyou specify seeding and transplanting dates and locations. By filling in these\nfields when you create a planting, you can let farmOS automatically create a\nseeding and/or transplanting log for you.\n\n\nYou can optionally mark the logs as \"done\" immediately, which is useful if you\nare adding information about past plantings. If you have not performed the\nseeding or transplanting yet, do not mark it as \"done\" so that it will appear\nin your todo list.", 
            "title": "Plantings"
        }, 
        {
            "location": "/guide/assets/plantings/#plantings", 
            "text": "farmOS can be used for very fine-grained crop planning and record keeping. It\ncan be used by large or small operations, nurseries, seed producers, breeders,\nand home gardeners.  The asset type used to manage crops is called a  Planting .  Plantings can be used to represent groups of plants (eg: a field of corn, or a\ngroup of seedlings), or it can be used to represent individual plants (eg: in\nthe case of nurseries).", 
            "title": "Plantings"
        }, 
        {
            "location": "/guide/assets/plantings/#cropsvarieties", 
            "text": "When you create a planting asset, you will need to define what  crop/variety \nit is. Crops/varieties represent the various  types  of plantings you grow.\nThese can be very general crop names (eg: \"Broccoli\") or very specific breeds\nor varieties (eg: \"Belstar F1 Organic Broccoli\").  Plantings are the specific asset you are growing, whereas crops/varieties are\nused to categorize and define planting types. You may have multiple plantings\nof the same crop/variety. Consider the following example:   1 pound of red lettuce seed was purchased and seeded 4 times over the course\nof 8 weeks (every two weeks).   In this example, there would be 4 planting assets with a crop/variety of \"Red\nlettuce\":   2017 Red lettuce planting 1  2017 Red lettuce planting 2  2017 Red lettuce planting 3  2017 Red lettuce planting 4   The way you name your plantings is up to you - this is just an example.\nIncluding the year at the beginning and the planting number at the end is\nhelpful when you are looking at long lists of plantings.", 
            "title": "Crops/varieties"
        }, 
        {
            "location": "/guide/assets/plantings/#planting-logs", 
            "text": "In addition to the standard  log types  that all farmOS assets share\n(activities, observations, inputs, and harvests), there are two log types that\nare specific to plantings: seedings and transplantings.  Seeding  logs represent when seeds were planted in the ground or in\ncontainers. With a seeding log, you can specify the seeding quantity (eg: 100\nlbs, 20 72-plug trays, etc), and you can specify where the seeding occurred\n(using the  movement fields ) so that farmOS knows where the planting asset is\nlocated.  Transplanting  logs represent when a planting was transplanted from one\nplace to another. Similar to seeding logs, transplantings can have a quantity\nand a location.  If you are direct seeding into the field, you may only use the seeding log. If\nyou are purchasing starts from another grower, you may only use the\ntransplanting log. If you are starting your plantings in a greenhouse and then\nplanting them out in the field, you may use both a seeding and transplanting\nlog.", 
            "title": "Planting logs"
        }, 
        {
            "location": "/guide/assets/plantings/#planting-plan", 
            "text": "When you add a new planting, you will see a special \"Plan\" fieldset, which lets\nyou specify seeding and transplanting dates and locations. By filling in these\nfields when you create a planting, you can let farmOS automatically create a\nseeding and/or transplanting log for you.  You can optionally mark the logs as \"done\" immediately, which is useful if you\nare adding information about past plantings. If you have not performed the\nseeding or transplanting yet, do not mark it as \"done\" so that it will appear\nin your todo list.", 
            "title": "Planting plan"
        }, 
        {
            "location": "/guide/assets/animals/", 
            "text": "Animals\n\n\nfarmOS can be used to manage animal/livestock records.\n\n\nAn \"Animal\" asset type is provided for representing animal records, and all of\nthe standard farmOS \nlog types\n can be used to record events and activities.\n\n\nAnimal records can be used to represent either individual animals, or multiple\nanimals (see \"Inventory / head counts\" below).\n\n\nSpecies/breeds\n\n\nWhen you create an animal asset, you will need to define what \nspecies/breed\n\nit is. Species/breeds represent the various \ntypes\n of animals you manage.\nThese can be very general names (eg: \"Cattle\") or more specific breeds (eg:\n\"Jersey cattle\").\n\n\nAnimal groups/herds\n\n\nAnimals can also be organized into groups using the \nGroup\n asset type. This is\nuseful if you always manage certain animals together. It is also possible to\nassign animals to more than one group. This can be used in many different ways\nto help manage large numbers of animals in farmOS. See the \nGroup\n asset guide\nto learn more.\n\n\nInventory / head counts\n\n\nA single animal record can be used for managing more than one animal. This is\nuseful in cases where animals don't need to be tracked individually, for\ninstance with flocks of birds or heads of cattle (where individual tagging is\nnot necessary for record keeping purposes).\n\n\nTo learn how to use inventory adjustments to track animal head counts over\ntime, read the \ninventory\n use guide.\n\n\n\n\nQ: Should I use inventory or groups for my animals?\n\n\n\n\nThis comes down to whether or not you need to maintain separate records for\nindividual animals. If you do, then create a separate animal asset for each\nanimal, and you can optionally organize them into group assets after that. If\nyou don't need individual animal records, you can create a single animal asset\nand use the inventory features to track a head count over time with logs. Or,\nyou could do both! Perhaps you have a herd (group asset) with some individual\nanimals, and some larger groups of animals (head count). It's just a matter of\nhow granular you need your record keeping to be.\n\n\nMovements\n\n\nAnimals can be moved from place to place in farmOS using \nmovement logs\n. You\ncan also filter your animal list down to animals within a certain group, select\nall, and create a combined movement log for all of them at once. This is a\ngreat way to manage grazing records as you move animals from paddock to\npaddock. For more general information on moving assets in farmOS, read the page\non \nmovements and location\n.\n\n\nMedical records\n\n\nIn addition to the standard \nlog types\n that all farmOS assets share\n(activities, observations, inputs, and harvests), the livestock module provides\nan additional log type that is specific to animals: medical records.\n\n\nMedical\n logs can be used to record animal health records. This can be a\nveterinary visit, administering medicine/vaccinations, or other medical\nprocedures. You can also use standard \nInput\n logs when administering\nmedicine or vaccinations, if you prefer, and reserve \nMedical\n logs for more\nserious events/procedures.", 
            "title": "Animals"
        }, 
        {
            "location": "/guide/assets/animals/#animals", 
            "text": "farmOS can be used to manage animal/livestock records.  An \"Animal\" asset type is provided for representing animal records, and all of\nthe standard farmOS  log types  can be used to record events and activities.  Animal records can be used to represent either individual animals, or multiple\nanimals (see \"Inventory / head counts\" below).", 
            "title": "Animals"
        }, 
        {
            "location": "/guide/assets/animals/#speciesbreeds", 
            "text": "When you create an animal asset, you will need to define what  species/breed \nit is. Species/breeds represent the various  types  of animals you manage.\nThese can be very general names (eg: \"Cattle\") or more specific breeds (eg:\n\"Jersey cattle\").", 
            "title": "Species/breeds"
        }, 
        {
            "location": "/guide/assets/animals/#animal-groupsherds", 
            "text": "Animals can also be organized into groups using the  Group  asset type. This is\nuseful if you always manage certain animals together. It is also possible to\nassign animals to more than one group. This can be used in many different ways\nto help manage large numbers of animals in farmOS. See the  Group  asset guide\nto learn more.", 
            "title": "Animal groups/herds"
        }, 
        {
            "location": "/guide/assets/animals/#inventory-head-counts", 
            "text": "A single animal record can be used for managing more than one animal. This is\nuseful in cases where animals don't need to be tracked individually, for\ninstance with flocks of birds or heads of cattle (where individual tagging is\nnot necessary for record keeping purposes).  To learn how to use inventory adjustments to track animal head counts over\ntime, read the  inventory  use guide.   Q: Should I use inventory or groups for my animals?   This comes down to whether or not you need to maintain separate records for\nindividual animals. If you do, then create a separate animal asset for each\nanimal, and you can optionally organize them into group assets after that. If\nyou don't need individual animal records, you can create a single animal asset\nand use the inventory features to track a head count over time with logs. Or,\nyou could do both! Perhaps you have a herd (group asset) with some individual\nanimals, and some larger groups of animals (head count). It's just a matter of\nhow granular you need your record keeping to be.", 
            "title": "Inventory / head counts"
        }, 
        {
            "location": "/guide/assets/animals/#movements", 
            "text": "Animals can be moved from place to place in farmOS using  movement logs . You\ncan also filter your animal list down to animals within a certain group, select\nall, and create a combined movement log for all of them at once. This is a\ngreat way to manage grazing records as you move animals from paddock to\npaddock. For more general information on moving assets in farmOS, read the page\non  movements and location .", 
            "title": "Movements"
        }, 
        {
            "location": "/guide/assets/animals/#medical-records", 
            "text": "In addition to the standard  log types  that all farmOS assets share\n(activities, observations, inputs, and harvests), the livestock module provides\nan additional log type that is specific to animals: medical records.  Medical  logs can be used to record animal health records. This can be a\nveterinary visit, administering medicine/vaccinations, or other medical\nprocedures. You can also use standard  Input  logs when administering\nmedicine or vaccinations, if you prefer, and reserve  Medical  logs for more\nserious events/procedures.", 
            "title": "Medical records"
        }, 
        {
            "location": "/guide/assets/equipment/", 
            "text": "Equipment\n\n\nfarmOS can be used to manage equipment assets on the farm.\n\n\nEquipment \nmovements\n and activities can be recorded via standard \nlog types\n,\nand a special \nMaintenance\n log type is provided specifically for keeping\nequipment maintenance records.\n\n\n\n  \n\n\n\n\n\nEquipment logs\n\n\nIn addition to the standard \nlog types\n that all farmOS assets share\n(activities, observations, inputs, and harvests), the equipment module provides\nan additional log type that is specific to equipment: maintenance.\n\n\nMaintenance\n logs can be used to record when you perform maintenance on a\npiece of equipment. This can be a repair, a tune-up, an oil change, a cleaning,\nor anything thing else that is maintenance related to the proper use and\nfunctioning of the equipment. All your maintenance records can be organized,\ncategorized, and filtered like other log types in farmOS.\n\n\nSuggested uses\n\n\n\n\nKeep track of equipment location via movement logs.\n\n\nRecord oil changes, repairs, and inspections with maintenance logs.\n\n\nUse activity logs to record equipment use.\n\n\nTrack fuel usage with input logs.", 
            "title": "Equipment"
        }, 
        {
            "location": "/guide/assets/equipment/#equipment", 
            "text": "farmOS can be used to manage equipment assets on the farm.  Equipment  movements  and activities can be recorded via standard  log types ,\nand a special  Maintenance  log type is provided specifically for keeping\nequipment maintenance records.", 
            "title": "Equipment"
        }, 
        {
            "location": "/guide/assets/equipment/#equipment-logs", 
            "text": "In addition to the standard  log types  that all farmOS assets share\n(activities, observations, inputs, and harvests), the equipment module provides\nan additional log type that is specific to equipment: maintenance.  Maintenance  logs can be used to record when you perform maintenance on a\npiece of equipment. This can be a repair, a tune-up, an oil change, a cleaning,\nor anything thing else that is maintenance related to the proper use and\nfunctioning of the equipment. All your maintenance records can be organized,\ncategorized, and filtered like other log types in farmOS.", 
            "title": "Equipment logs"
        }, 
        {
            "location": "/guide/assets/equipment/#suggested-uses", 
            "text": "Keep track of equipment location via movement logs.  Record oil changes, repairs, and inspections with maintenance logs.  Use activity logs to record equipment use.  Track fuel usage with input logs.", 
            "title": "Suggested uses"
        }, 
        {
            "location": "/guide/assets/compost/", 
            "text": "Compost\n\n\nfarmOS can be used to manage all types of compost production activities. The\n\nFarm Soil: Compost\n module provides a generic \"Compost\" \nasset\n type, which can\nbe used with various \nlog types\n to record activities, observations, inputs,\nharvests, etc. The compost asset can be used to represent a compost pile,\n\nwindrows\n, \nvermicompost\n, \ntea\n, or any other form of production.", 
            "title": "Compost"
        }, 
        {
            "location": "/guide/assets/compost/#compost", 
            "text": "farmOS can be used to manage all types of compost production activities. The Farm Soil: Compost  module provides a generic \"Compost\"  asset  type, which can\nbe used with various  log types  to record activities, observations, inputs,\nharvests, etc. The compost asset can be used to represent a compost pile, windrows ,  vermicompost ,  tea , or any other form of production.", 
            "title": "Compost"
        }, 
        {
            "location": "/guide/assets/sensors/", 
            "text": "Sensors\n\n\nIn addition to manually-entered records, farmOS also provides a framework for\nimporting data from automated environmental sensors. The \nFarm Sensor\n module\nadds a \nSensor\n asset type, which can be tracked like any other asset.\nSub-modules (like \nFarm Sensor: Listener\n) extend the Sensor asset type by\nproviding integration with external devices. Additional modules can be built to\nconnect to specific types of sensors. It is also possible to assemble your own\nsensors with inexpensive components and send their data to farmOS.\n\n\n\n  \n\n\n\n\n\nFarm Sensor: Listener\n\n\nThe \nFarm Sensor: Listener\n module is a general-purpose sensor sub-module that\nprovides a simple \"Listener\" sensor type. Each sensor asset that is denoted as\na listener receives a unique URL with a public and private key that data can be\npushed to using standard \nHTTP\n requests and \nJSON\n-encoded data. Data is\nstored in the database and is displayed in the sensor asset within farmOS.\n\n\nSpecific instructions are provided in the farmOS interface itself when you\ncreate a listener sensor asset. Refer to those instructions for more\ninformation, as well as sample code and JSON formatting.\n\n\nThe listener module is useful for simple data streams. For more complex data, a\nmore customized sub-module may be necessary.\n\n\nOpen Pipe Kit\n\n\nThe \nOpen Pipe Kit\n project provides a command-line script that can be used to\npush data to farmOS from various sensors using the \nFarm Sensor: Listener\n\nmodule. The following video demonstrates how to set it up. For more information\nabout Open Pipe Kit, refer to: \nhttp://openpipekit.github.io\n\n\nOpen Pipe Kit farmOS CLI: \nhttps://github.com/openpipekit/farmos-cli\n\n\n\n\n\nNotifications\n\n\nThe \nFarm Sensor: Listener\n module comes with a basic alert notification\nmechanism that can be configured to send an email or text message if an\nincoming value is above or below a given threshold.\n\n\nText messages:\n It is possible to send text messages by entering a special\nemail address that corresponds to your phone number and mobile carrier.\n\n\nHere are the domain names used for some of the more popular phone carriers:\n\n\n\n\nUS Cellular: \n[number]@email.uscc.net\n\n\nVerizon: \n[number]@vtext.com\n\n\nVirgin: \n[number]@vmobl.com\n\n\nAT\nT: \n[number]@txt.att.net\n\n\nNextel: \n[number]@messaging.nextel.com\n\n\nSprint: \n[number]@messaging.sprintpcs.com\n\n\nT-Mobile: \n[number]@tmomail.net\n\n\nrepublic wirelsss: \n[number]@text.republicwireless.com\n\n\n\n\nUse the phone number of the person you are texting followed by the domain name\ncorresponding to their carrier. For example, if you are sending a text message\nto a Nextel subscriber with the phone number \n232-232-2323\n, you would enter\n\n2322322323@messaging.nextel.com\n.", 
            "title": "Sensors"
        }, 
        {
            "location": "/guide/assets/sensors/#sensors", 
            "text": "In addition to manually-entered records, farmOS also provides a framework for\nimporting data from automated environmental sensors. The  Farm Sensor  module\nadds a  Sensor  asset type, which can be tracked like any other asset.\nSub-modules (like  Farm Sensor: Listener ) extend the Sensor asset type by\nproviding integration with external devices. Additional modules can be built to\nconnect to specific types of sensors. It is also possible to assemble your own\nsensors with inexpensive components and send their data to farmOS.", 
            "title": "Sensors"
        }, 
        {
            "location": "/guide/assets/sensors/#farm-sensor-listener", 
            "text": "The  Farm Sensor: Listener  module is a general-purpose sensor sub-module that\nprovides a simple \"Listener\" sensor type. Each sensor asset that is denoted as\na listener receives a unique URL with a public and private key that data can be\npushed to using standard  HTTP  requests and  JSON -encoded data. Data is\nstored in the database and is displayed in the sensor asset within farmOS.  Specific instructions are provided in the farmOS interface itself when you\ncreate a listener sensor asset. Refer to those instructions for more\ninformation, as well as sample code and JSON formatting.  The listener module is useful for simple data streams. For more complex data, a\nmore customized sub-module may be necessary.", 
            "title": "Farm Sensor: Listener"
        }, 
        {
            "location": "/guide/assets/sensors/#open-pipe-kit", 
            "text": "The  Open Pipe Kit  project provides a command-line script that can be used to\npush data to farmOS from various sensors using the  Farm Sensor: Listener \nmodule. The following video demonstrates how to set it up. For more information\nabout Open Pipe Kit, refer to:  http://openpipekit.github.io  Open Pipe Kit farmOS CLI:  https://github.com/openpipekit/farmos-cli", 
            "title": "Open Pipe Kit"
        }, 
        {
            "location": "/guide/assets/sensors/#notifications", 
            "text": "The  Farm Sensor: Listener  module comes with a basic alert notification\nmechanism that can be configured to send an email or text message if an\nincoming value is above or below a given threshold.  Text messages:  It is possible to send text messages by entering a special\nemail address that corresponds to your phone number and mobile carrier.  Here are the domain names used for some of the more popular phone carriers:   US Cellular:  [number]@email.uscc.net  Verizon:  [number]@vtext.com  Virgin:  [number]@vmobl.com  AT T:  [number]@txt.att.net  Nextel:  [number]@messaging.nextel.com  Sprint:  [number]@messaging.sprintpcs.com  T-Mobile:  [number]@tmomail.net  republic wirelsss:  [number]@text.republicwireless.com   Use the phone number of the person you are texting followed by the domain name\ncorresponding to their carrier. For example, if you are sending a text message\nto a Nextel subscriber with the phone number  232-232-2323 , you would enter 2322322323@messaging.nextel.com .", 
            "title": "Notifications"
        }, 
        {
            "location": "/guide/assets/groups/", 
            "text": "Groups\n\n\nA \nGroup\n asset type is provided for organizing other assets into groups.\nThis provides a lot of flexibility in managing and organizing your assets.\n\nLogs\n can reference the group asset, instead of all the individual members.\n\n\nThis is useful when managing herds of animals. Each herd can be represented as\na group asset, with animal records assigned to it. A movement log can be used\nto move the whole group, instead of referencing animal assets individually.\n\n\nYou can also use groups to organize equipment, plantings, or any other asset\ntype. It's even possible to have groups within groups, to create a hierarchy\nof group membership.\n\n\nGroup membership is assigned to assets via logs, in very much the same way that\n\nlocation\n is. You can assign assets to a group via the \"Group membership\"\nfields on Activity and Observation logs. This specifies that the asset(s)\nbecame members of the group at the time of the log.\n\n\nTherefore, assets can also change their membership over time, moving from one\ngroup to another. One example where this is useful is in managing cattle: you\nmay have a group of mothers with calves, a group of weaned calves, and other\ngroups of steers, heifers, etc. As a calf grows up, weans, and perhaps has\ntheir own calf, they can be moved from group to group, and the full history of\ntheir group membership is saved as logs.", 
            "title": "Groups"
        }, 
        {
            "location": "/guide/assets/groups/#groups", 
            "text": "A  Group  asset type is provided for organizing other assets into groups.\nThis provides a lot of flexibility in managing and organizing your assets. Logs  can reference the group asset, instead of all the individual members.  This is useful when managing herds of animals. Each herd can be represented as\na group asset, with animal records assigned to it. A movement log can be used\nto move the whole group, instead of referencing animal assets individually.  You can also use groups to organize equipment, plantings, or any other asset\ntype. It's even possible to have groups within groups, to create a hierarchy\nof group membership.  Group membership is assigned to assets via logs, in very much the same way that location  is. You can assign assets to a group via the \"Group membership\"\nfields on Activity and Observation logs. This specifies that the asset(s)\nbecame members of the group at the time of the log.  Therefore, assets can also change their membership over time, moving from one\ngroup to another. One example where this is useful is in managing cattle: you\nmay have a group of mothers with calves, a group of weaned calves, and other\ngroups of steers, heifers, etc. As a calf grows up, weans, and perhaps has\ntheir own calf, they can be moved from group to group, and the full history of\ntheir group membership is saved as logs.", 
            "title": "Groups"
        }, 
        {
            "location": "/guide/location/", 
            "text": "Movements and location\n\n\nThe locations of all assets in farmOS are determined by \"Movement\" fields on\nlog entries.\n\n\nWhen you create an asset, it will not be located anywhere until a log is added\nthat includes this movement information. These logs can be referred to as\n\"movement logs\" even though they are actually an \"Activity\", \"Observation\", or\nother log type.\n\n\nfarmOS determines the \"current location\" of an asset by looking at the asset's\nmost recent movement log (with a date less than or equal to the present moment).\nOnly logs that have been marked as \"done\" are taken into consideration.\n\n\nEvery movement has a \"Movement To\" field on it, which is required in order to\nrecord a movement. It also includes an optional \"Movement From\" field (which\nwill be automatically filled in with the asset's current location if it is left\nblank), and a \"Movement Geometry\" field (which can be used to specify a more\nspecific location of the assets on a map).\n\n\nCreating movement logs\n\n\nThere are three ways that movement logs can be created:\n\n\n\n\nClick \"Add an activity\" (or other log type) when you are viewing a single\n   asset. This will present you with a new log form, and automatically fill in\n   the \"Assets\" field with the asset you were looking at. In the \"Movement\"\n   fieldset, select an area in the \"Movement To\" field to record a movement.\n\n\nSelect multiple assets in a list, and click the \"Move\" button at the bottom.\n   This allows you to move multiple assets at once. Similarly, this will present\n   you with a new activity log form, and automatically fill in the \"Assets\"\n   field with the assets you selected in the list. Add an area to the \"Movement\n   To\" field to record a movement.\n\n\nClick \"Add a log\" from the farmOS dashboard, and select a log type. This\n   presents you with a blank log form, which you can fill in however you'd like.\n   Add an area to the \"Movement To\" field to record a movement.\n\n\n\n\nIf you leave an activity log name blank, and it includes movement information,\nit will default the log name to \"Move [asset] to [area]\".\n\n\nThere is also a shortcut: when you are editing an asset, you will see a field\nlabeled \"Location\". This field will show the asset's current location, and if\nyou change it a new observation log will automatically be created when you save\nthe asset titled \"Current location: [area]\". Doing this will set the date of\nthe log to the moment you clicked \"Save\", and it will be marked \"done\"\nimmediately.\n\n\nMovement fields\n\n\nHere is a quick summary of the fields in the \"Movement\" fieldset:\n\n\n\n\nTo\n - (required) This is the most important field on a movement log. The\n  area that is referenced with this field will be considered the asset's\n  location.\n\n\nFrom\n - (optional) Allows you to reference a specific area that assets are\n  moving FROM. This is optional, and in some cases it's filled in automatically\n  for you. It is primarily intended for more accurate historical records, and to\n  help identify inconsistencies or missing data.\n\n\nGeometry\n - (optional) movements can be defined with a more specific\n  geometry on the map using this field. This can be useful for temporary\n  locations (like a moveable fence) within a larger area. If you leave this\n  blank, the geometry will be automatically copied from the area referenced in\n  the \"Movement To\" field (if available).", 
            "title": "Movements and location"
        }, 
        {
            "location": "/guide/location/#movements-and-location", 
            "text": "The locations of all assets in farmOS are determined by \"Movement\" fields on\nlog entries.  When you create an asset, it will not be located anywhere until a log is added\nthat includes this movement information. These logs can be referred to as\n\"movement logs\" even though they are actually an \"Activity\", \"Observation\", or\nother log type.  farmOS determines the \"current location\" of an asset by looking at the asset's\nmost recent movement log (with a date less than or equal to the present moment).\nOnly logs that have been marked as \"done\" are taken into consideration.  Every movement has a \"Movement To\" field on it, which is required in order to\nrecord a movement. It also includes an optional \"Movement From\" field (which\nwill be automatically filled in with the asset's current location if it is left\nblank), and a \"Movement Geometry\" field (which can be used to specify a more\nspecific location of the assets on a map).", 
            "title": "Movements and location"
        }, 
        {
            "location": "/guide/location/#creating-movement-logs", 
            "text": "There are three ways that movement logs can be created:   Click \"Add an activity\" (or other log type) when you are viewing a single\n   asset. This will present you with a new log form, and automatically fill in\n   the \"Assets\" field with the asset you were looking at. In the \"Movement\"\n   fieldset, select an area in the \"Movement To\" field to record a movement.  Select multiple assets in a list, and click the \"Move\" button at the bottom.\n   This allows you to move multiple assets at once. Similarly, this will present\n   you with a new activity log form, and automatically fill in the \"Assets\"\n   field with the assets you selected in the list. Add an area to the \"Movement\n   To\" field to record a movement.  Click \"Add a log\" from the farmOS dashboard, and select a log type. This\n   presents you with a blank log form, which you can fill in however you'd like.\n   Add an area to the \"Movement To\" field to record a movement.   If you leave an activity log name blank, and it includes movement information,\nit will default the log name to \"Move [asset] to [area]\".  There is also a shortcut: when you are editing an asset, you will see a field\nlabeled \"Location\". This field will show the asset's current location, and if\nyou change it a new observation log will automatically be created when you save\nthe asset titled \"Current location: [area]\". Doing this will set the date of\nthe log to the moment you clicked \"Save\", and it will be marked \"done\"\nimmediately.", 
            "title": "Creating movement logs"
        }, 
        {
            "location": "/guide/location/#movement-fields", 
            "text": "Here is a quick summary of the fields in the \"Movement\" fieldset:   To  - (required) This is the most important field on a movement log. The\n  area that is referenced with this field will be considered the asset's\n  location.  From  - (optional) Allows you to reference a specific area that assets are\n  moving FROM. This is optional, and in some cases it's filled in automatically\n  for you. It is primarily intended for more accurate historical records, and to\n  help identify inconsistencies or missing data.  Geometry  - (optional) movements can be defined with a more specific\n  geometry on the map using this field. This can be useful for temporary\n  locations (like a moveable fence) within a larger area. If you leave this\n  blank, the geometry will be automatically copied from the area referenced in\n  the \"Movement To\" field (if available).", 
            "title": "Movement fields"
        }, 
        {
            "location": "/guide/quantity/", 
            "text": "Quantity measurements\n\n\nMost \nlogs\n in farmOS have the ability to record structured quantity\nmeasurements alongside other details. These can be used to collect data about\nyour farm activities in an organized way, which can be analyzed later to\nprovide insights.\n\n\nQuantity measurements can be added via the \"Quantity\" field on logs. More than\none quantity measurement can be added to a single log.\n\n\nThe \"Quantity\" field consists of four optional sub-fields:\n\n\n\n\nMeasure - What type of measurement is this? Eg: Weight, Volume, Count,\n  Temperature, etc.\n\n\nValue - The measurement value (a number).\n\n\nUnits - The unit of measure. This can be anything you like, but it's always\n  good to keep your units consistent, as much as possible, for later analysis.\n\n\nLabel - Labels are just a text field that allow you to add an additional note\n  to the quantity measurement. This is helpful if you have multiple quantities\n  of the same measure.", 
            "title": "Quantity measurements"
        }, 
        {
            "location": "/guide/quantity/#quantity-measurements", 
            "text": "Most  logs  in farmOS have the ability to record structured quantity\nmeasurements alongside other details. These can be used to collect data about\nyour farm activities in an organized way, which can be analyzed later to\nprovide insights.  Quantity measurements can be added via the \"Quantity\" field on logs. More than\none quantity measurement can be added to a single log.  The \"Quantity\" field consists of four optional sub-fields:   Measure - What type of measurement is this? Eg: Weight, Volume, Count,\n  Temperature, etc.  Value - The measurement value (a number).  Units - The unit of measure. This can be anything you like, but it's always\n  good to keep your units consistent, as much as possible, for later analysis.  Label - Labels are just a text field that allow you to add an additional note\n  to the quantity measurement. This is helpful if you have multiple quantities\n  of the same measure.", 
            "title": "Quantity measurements"
        }, 
        {
            "location": "/guide/inventory/", 
            "text": "Inventory tracking\n\n\nA new feature available in farmOS 7.x-1.0-beta16 is an inventory module, which\nallows for tracking of asset inventory levels over time via \nlogs\n. As of this\nrelease, inventory management is only enabled on \nanimal\n assets, but will be\nenabled on other asset types in future releases. For more information about\ntracking animal inventory, read the \nanimal\n asset user guide.\n\n\nInventory can be added/subtracted from an asset using the \"Inventory\nadjustment\" fields on logs. You may also make more than one inventory\nadjustment on an individual log (to different assets, for example).\n\n\nThe inventory adjustment field has two subfields: \nAsset\n and \nValue\n.\n\n\nThe asset field references the asset whose inventory is being adjusted. The\nvalue field is a positive or negative adjustment to the asset's inventory. A\npositive number will add to the inventory, and a negative number will subtract\nfrom the inventory.\n\n\nAn asset's current inventory is visible on the asset record page. You can also\nview a list of all logs that have adjusted the asset's inventory in the past\n(as well as planned inventory adjustment logs in the future).", 
            "title": "Inventory tracking"
        }, 
        {
            "location": "/guide/inventory/#inventory-tracking", 
            "text": "A new feature available in farmOS 7.x-1.0-beta16 is an inventory module, which\nallows for tracking of asset inventory levels over time via  logs . As of this\nrelease, inventory management is only enabled on  animal  assets, but will be\nenabled on other asset types in future releases. For more information about\ntracking animal inventory, read the  animal  asset user guide.  Inventory can be added/subtracted from an asset using the \"Inventory\nadjustment\" fields on logs. You may also make more than one inventory\nadjustment on an individual log (to different assets, for example).  The inventory adjustment field has two subfields:  Asset  and  Value .  The asset field references the asset whose inventory is being adjusted. The\nvalue field is a positive or negative adjustment to the asset's inventory. A\npositive number will add to the inventory, and a negative number will subtract\nfrom the inventory.  An asset's current inventory is visible on the asset record page. You can also\nview a list of all logs that have adjusted the asset's inventory in the past\n(as well as planned inventory adjustment logs in the future).", 
            "title": "Inventory tracking"
        }, 
        {
            "location": "/guide/people/", 
            "text": "People\n\n\nfarmOS allows a farm to have multiple \"users\" accessing it, and each of those\nusers is assigned one or more \"roles\" to grant them different levels of\npermission.\n\n\n\n  \n\n\n\n\n\nRoles\n\n\nThree roles are provided with farmOS:\n\n\nFarm Manager\n\n\nFarm Managers have access to everything in farmOS. They can create areas, add\nassets, record logs, and change configuration.\n\n\nFarm Worker\n\n\nFarm Workers have most of the same permissions as Managers, but they cannot\nchange configuration.\n\n\nFarm Viewer\n\n\nFarm Viewers are limited to viewing farmOS areas, assets, and logs - but they\ncannot edit anything.\n\n\nThe Farm Viewer role is useful if you want to share your farm's activities with\nsomeone, but you don't want to give them the ability to make changes.\n\n\nFor example, if you are applying for Organic certification in the United States,\nyou can create a user with the Farm Viewer role for your certifying agent, so\nthey can log into your farmOS and see your records.", 
            "title": "People"
        }, 
        {
            "location": "/guide/people/#people", 
            "text": "farmOS allows a farm to have multiple \"users\" accessing it, and each of those\nusers is assigned one or more \"roles\" to grant them different levels of\npermission.", 
            "title": "People"
        }, 
        {
            "location": "/guide/people/#roles", 
            "text": "Three roles are provided with farmOS:", 
            "title": "Roles"
        }, 
        {
            "location": "/guide/people/#farm-manager", 
            "text": "Farm Managers have access to everything in farmOS. They can create areas, add\nassets, record logs, and change configuration.", 
            "title": "Farm Manager"
        }, 
        {
            "location": "/guide/people/#farm-worker", 
            "text": "Farm Workers have most of the same permissions as Managers, but they cannot\nchange configuration.", 
            "title": "Farm Worker"
        }, 
        {
            "location": "/guide/people/#farm-viewer", 
            "text": "Farm Viewers are limited to viewing farmOS areas, assets, and logs - but they\ncannot edit anything.  The Farm Viewer role is useful if you want to share your farm's activities with\nsomeone, but you don't want to give them the ability to make changes.  For example, if you are applying for Organic certification in the United States,\nyou can create a user with the Farm Viewer role for your certifying agent, so\nthey can log into your farmOS and see your records.", 
            "title": "Farm Viewer"
        }, 
        {
            "location": "/guide/import/", 
            "text": "Importing data\n\n\nCSV\n importers are provided for all \nasset\n and \nlog\n types in farmOS.\n\n\nThis video by Chris Callahan at \nUVM Extension\n's\n\nAgricultural Engineering Program\n summarizes the comma separated variable\n(CSV) import and export feature of FarmOS which allows for the import and\nexport of FarmOS data from and to spreadsheet applications. This may be\nespecially helpful for offline use.\n\n\n\n\n\nLinks to each importer can be found at the top of each primary asset or log\nlisting page (accessible via the \nmain menu\n of farmOS). For example, if you\nwant to import Animal assets, click on Assets \n Animals in the main menu, and\nthen click the \"Import animals\" action link at the top of the page.\n\n\nThere is a link to \"Download a template\" within the importer page, which will\ngive you a blank CSV file with all the necessary column headers. Start with the\ntemplate file, and add a row for each of the records you want to import. Save\nthis file and upload it to the importer form to create the new records in\nfarmOS.\n\n\nCommon fields\n\n\nEach asset/log type has its own importer, and some have fields that are unique\nto their type, but there are some common fields that are shared across all\nimporters.\n\n\nCommon asset fields include:\n\n\n\n\nName\n - The name of the asset (required).\n\n\nActive\n - Whether or not the asset is currently active. See\n  \"Boolean options\" below for allowed values. If omitted, the asset will be\n  marked as \"active\".\n\n\nDescription\n - A longer description of the asset.\n\n\nParent IDs\n - A comma-separated list of asset IDs that represent parents\n  of the asset being imported. These parent assets must already exist in farmOS\n  in order for the link to be created.\n\n\n\n\nCommon log fields include:\n\n\n\n\nName\n - The name of the log. This will be automatically generated if it is\n  left blank.\n\n\nDate\n - The date when the logged event takes place (required). This can be\n  a string in any English date format that is convertable to a UNIX timestamp.\n\n\nDone\n - Whether or not the log is complete. See \"Boolean options\" below\n  for allowed values. If omitted, the log will be marked as \"done\".\n\n\nNotes\n - A longer description of the logged event.\n\n\nAsset IDs\n - A comma-separated list of asset IDs that this log is related\n  to. These assets must already exist in farmOS in order for the link to be\n  created.\n\n\nArea names\n - A comma-separated list of areas that this log is related to.\n  Areas will be matched on their name, and new areas will be created if they do\n  not exist.\n\n\nCategory names\n - A comma-separated list of log categories that should be\n  applied to the log. The categories must already exist in farmOS in order for\n  the assignment to take place.\n\n\n\n\nCommon fields that are required are noted above. Specific asset/log type\nimporters may have additional required fields.\n\n\nBoolean values\n\n\nThe following values are acceptable for boolean fields, like \"Active\" for asset\nimporters, and \"Done\" for log importers. These values are not case sensitive\n(so \"Yes\" and \"yes\" will be treated the same).\n\n\nTrue\n\n\n\n\nYes\n\n\nY\n\n\nTrue\n\n\nT\n\n\n1\n\n\n\n\nFalse\n\n\n\n\nNo\n\n\nN\n\n\nFalse\n\n\nF\n\n\n0\n\n\n\n\nAccess\n\n\nCSV importers are only available to users with the Farm Manager \nrole\n.", 
            "title": "Import"
        }, 
        {
            "location": "/guide/import/#importing-data", 
            "text": "CSV  importers are provided for all  asset  and  log  types in farmOS.  This video by Chris Callahan at  UVM Extension 's Agricultural Engineering Program  summarizes the comma separated variable\n(CSV) import and export feature of FarmOS which allows for the import and\nexport of FarmOS data from and to spreadsheet applications. This may be\nespecially helpful for offline use.   Links to each importer can be found at the top of each primary asset or log\nlisting page (accessible via the  main menu  of farmOS). For example, if you\nwant to import Animal assets, click on Assets   Animals in the main menu, and\nthen click the \"Import animals\" action link at the top of the page.  There is a link to \"Download a template\" within the importer page, which will\ngive you a blank CSV file with all the necessary column headers. Start with the\ntemplate file, and add a row for each of the records you want to import. Save\nthis file and upload it to the importer form to create the new records in\nfarmOS.", 
            "title": "Importing data"
        }, 
        {
            "location": "/guide/import/#common-fields", 
            "text": "Each asset/log type has its own importer, and some have fields that are unique\nto their type, but there are some common fields that are shared across all\nimporters.  Common asset fields include:   Name  - The name of the asset (required).  Active  - Whether or not the asset is currently active. See\n  \"Boolean options\" below for allowed values. If omitted, the asset will be\n  marked as \"active\".  Description  - A longer description of the asset.  Parent IDs  - A comma-separated list of asset IDs that represent parents\n  of the asset being imported. These parent assets must already exist in farmOS\n  in order for the link to be created.   Common log fields include:   Name  - The name of the log. This will be automatically generated if it is\n  left blank.  Date  - The date when the logged event takes place (required). This can be\n  a string in any English date format that is convertable to a UNIX timestamp.  Done  - Whether or not the log is complete. See \"Boolean options\" below\n  for allowed values. If omitted, the log will be marked as \"done\".  Notes  - A longer description of the logged event.  Asset IDs  - A comma-separated list of asset IDs that this log is related\n  to. These assets must already exist in farmOS in order for the link to be\n  created.  Area names  - A comma-separated list of areas that this log is related to.\n  Areas will be matched on their name, and new areas will be created if they do\n  not exist.  Category names  - A comma-separated list of log categories that should be\n  applied to the log. The categories must already exist in farmOS in order for\n  the assignment to take place.   Common fields that are required are noted above. Specific asset/log type\nimporters may have additional required fields.", 
            "title": "Common fields"
        }, 
        {
            "location": "/guide/import/#boolean-values", 
            "text": "The following values are acceptable for boolean fields, like \"Active\" for asset\nimporters, and \"Done\" for log importers. These values are not case sensitive\n(so \"Yes\" and \"yes\" will be treated the same).", 
            "title": "Boolean values"
        }, 
        {
            "location": "/guide/import/#true", 
            "text": "Yes  Y  True  T  1", 
            "title": "True"
        }, 
        {
            "location": "/guide/import/#false", 
            "text": "No  N  False  F  0", 
            "title": "False"
        }, 
        {
            "location": "/guide/import/#access", 
            "text": "CSV importers are only available to users with the Farm Manager  role .", 
            "title": "Access"
        }, 
        {
            "location": "/guide/export/", 
            "text": "Exporting data\n\n\nAll \nasset\n and \nlog\n lists in farmOS provide a \nCSV\n export button at the\nbottom that will generate and download a CSV file.\n\n\nAny sorts or filters that are applied to the list will be represented in the\nCSV output.\n\n\nReimporting\n\n\nWhile it is technically possible to move data from one farmOS to another via\nCSV files, it is not recommended due to differences in the import/export CSV\nformat.\n\n\nIf you are trying to export assets or logs from one farmOS site so that they\ncan be imported into another farmOS site it is important to note that there are\nsome differences that can complicate things. It is technically possible, but\nthere are some limitations and differences to be aware of. Please read all of\nthe following before attempting it.\n\n\nThere is an open issue to resolve these differences here:\n\nhttps://www.drupal.org/node/2900239\n\n\nDifferences and considerations\n\n\nSome of the differences and considerations to be aware of are described below.\n\n\nColumn differences\n\n\nIn most cases, the CSV column names that are exported from asset and log lists\nwill match those of the corresponding \nCSV importer\n for that type. There may\nbe columns present in imports that are not present in exports, and vice versa.\nCompare the exported CSV columns to the importer's CSV template columns before\nimporting to understand what pieces of information might be missing from either\nside.\n\n\nAsset and log IDs\n\n\nExported CSVs will include a column for the asset or log ID, which is not\navailable as a field for import. You can still import CSVs with this column,\nbut it will be ignored during the import and a new ID will be assigned by\nfarmOS to the imported asset or log. If there are any other logs or assets that\nreference this ID, they will need to be manually updated to point to the\ncorrect IDs when you import them.\n\n\nLog \"Done\" column\n\n\nIn log exports, the \"Done\" column will contain a checkmark if the log is done,\nand it will be empty if the log is not done. This differs from the format\nexpected by log importers. Log importers expect a value of \"yes\" or \"no\" in the\n\"Done\" column, and blank values will automatically default to \"yes\", which is\nthe opposite of what a blank value means in CSV exports.\n\n\nTruncated text\n\n\nDescriptions, notes, and other long text fields are truncated when they are\ndisplayed in asset and log lists in farmOS. When those lists are exported to\nCSV, the text will also be truncated in the export.\n\n\nFiles and images\n\n\nCSV exports do not provide any mechanism for exporting images or files that are\nattached to assets or logs. Files and images need to be uploaded manually after\nimport.\n\n\nAsset location\n\n\nThe CSV importers provided for assets do not currently support setting asset\nlocation, and log importers do not currently support importing movement\ninformation. Asset location needs to be set manually after assets are imported.", 
            "title": "Export"
        }, 
        {
            "location": "/guide/export/#exporting-data", 
            "text": "All  asset  and  log  lists in farmOS provide a  CSV  export button at the\nbottom that will generate and download a CSV file.  Any sorts or filters that are applied to the list will be represented in the\nCSV output.", 
            "title": "Exporting data"
        }, 
        {
            "location": "/guide/export/#reimporting", 
            "text": "While it is technically possible to move data from one farmOS to another via\nCSV files, it is not recommended due to differences in the import/export CSV\nformat.  If you are trying to export assets or logs from one farmOS site so that they\ncan be imported into another farmOS site it is important to note that there are\nsome differences that can complicate things. It is technically possible, but\nthere are some limitations and differences to be aware of. Please read all of\nthe following before attempting it.  There is an open issue to resolve these differences here: https://www.drupal.org/node/2900239", 
            "title": "Reimporting"
        }, 
        {
            "location": "/guide/export/#differences-and-considerations", 
            "text": "Some of the differences and considerations to be aware of are described below.", 
            "title": "Differences and considerations"
        }, 
        {
            "location": "/guide/export/#column-differences", 
            "text": "In most cases, the CSV column names that are exported from asset and log lists\nwill match those of the corresponding  CSV importer  for that type. There may\nbe columns present in imports that are not present in exports, and vice versa.\nCompare the exported CSV columns to the importer's CSV template columns before\nimporting to understand what pieces of information might be missing from either\nside.", 
            "title": "Column differences"
        }, 
        {
            "location": "/guide/export/#asset-and-log-ids", 
            "text": "Exported CSVs will include a column for the asset or log ID, which is not\navailable as a field for import. You can still import CSVs with this column,\nbut it will be ignored during the import and a new ID will be assigned by\nfarmOS to the imported asset or log. If there are any other logs or assets that\nreference this ID, they will need to be manually updated to point to the\ncorrect IDs when you import them.", 
            "title": "Asset and log IDs"
        }, 
        {
            "location": "/guide/export/#log-done-column", 
            "text": "In log exports, the \"Done\" column will contain a checkmark if the log is done,\nand it will be empty if the log is not done. This differs from the format\nexpected by log importers. Log importers expect a value of \"yes\" or \"no\" in the\n\"Done\" column, and blank values will automatically default to \"yes\", which is\nthe opposite of what a blank value means in CSV exports.", 
            "title": "Log \"Done\" column"
        }, 
        {
            "location": "/guide/export/#truncated-text", 
            "text": "Descriptions, notes, and other long text fields are truncated when they are\ndisplayed in asset and log lists in farmOS. When those lists are exported to\nCSV, the text will also be truncated in the export.", 
            "title": "Truncated text"
        }, 
        {
            "location": "/guide/export/#files-and-images", 
            "text": "CSV exports do not provide any mechanism for exporting images or files that are\nattached to assets or logs. Files and images need to be uploaded manually after\nimport.", 
            "title": "Files and images"
        }, 
        {
            "location": "/guide/export/#asset-location", 
            "text": "The CSV importers provided for assets do not currently support setting asset\nlocation, and log importers do not currently support importing movement\ninformation. Asset location needs to be set manually after assets are imported.", 
            "title": "Asset location"
        }, 
        {
            "location": "/guide/contrib/", 
            "text": "Community modules\n\n\nThe farmOS platform can be extended with modules built by the community. This\nsection of the user guide contains documentation for community modules.\n\n\nIf you have built a farmOS module and would like to include your documentation\nhere, you can fork the \nfarmOS.org repository on Github\n and create a pull\nrequest.\n\n\n\n\nEggs\n\n\nProduce Safety", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/contrib/#community-modules", 
            "text": "The farmOS platform can be extended with modules built by the community. This\nsection of the user guide contains documentation for community modules.  If you have built a farmOS module and would like to include your documentation\nhere, you can fork the  farmOS.org repository on Github  and create a pull\nrequest.   Eggs  Produce Safety", 
            "title": "Community modules"
        }, 
        {
            "location": "/guide/contrib/eggs/", 
            "text": "Eggs\n\n\nhttps://github.com/farmOS/farm_eggs\n\n\nThe Eggs module for farmOS provides a shortcut for adding egg collection logs.\nIf you have chickens, ducks, or other egg-laying birds, this makes it very fast\nand easy to record egg harvests from your phone on your way back from the coop.\n\n\nThe shortcut form is available via an \"Eggs\" tab on the farmOS dashboard (the\npath will be \n/farm/eggs\n). It allows you to specify a quantity and,\noptionally, a \ngroup\n or \nanimal\n asset to associate it with.\n\n\nWhen you first install the module, the \"Group/animal\" reference field won't be\navailable. You need to enable it on specific \ngroup\n or \nanimal\n assets in\norder to see them as checkbox options. To do so, navigate to the asset you\nwould like, click the \"Edit\" tab, and find the checkbox labeled \"This\ngroup/animal produces eggs\". Check the box, save the asset, return to the\nEggs form, and you should see the asset available as an option.\n\n\nWhen you submit the egg form, a harvest log will be created with the log name,\nquantity, and asset reference fields filled in automatically.", 
            "title": "Eggs"
        }, 
        {
            "location": "/guide/contrib/eggs/#eggs", 
            "text": "https://github.com/farmOS/farm_eggs  The Eggs module for farmOS provides a shortcut for adding egg collection logs.\nIf you have chickens, ducks, or other egg-laying birds, this makes it very fast\nand easy to record egg harvests from your phone on your way back from the coop.  The shortcut form is available via an \"Eggs\" tab on the farmOS dashboard (the\npath will be  /farm/eggs ). It allows you to specify a quantity and,\noptionally, a  group  or  animal  asset to associate it with.  When you first install the module, the \"Group/animal\" reference field won't be\navailable. You need to enable it on specific  group  or  animal  assets in\norder to see them as checkbox options. To do so, navigate to the asset you\nwould like, click the \"Edit\" tab, and find the checkbox labeled \"This\ngroup/animal produces eggs\". Check the box, save the asset, return to the\nEggs form, and you should see the asset available as an option.  When you submit the egg form, a harvest log will be created with the log name,\nquantity, and asset reference fields filled in automatically.", 
            "title": "Eggs"
        }, 
        {
            "location": "/guide/contrib/produce-safety/", 
            "text": "Produce Safety\n\n\nhttps://github.com/farmOS/farm_produce_safety\n\n\nThe Produce Safety module for farmOS provides record keeping features for the\nFSMA Produce Safety Rule in the United States, developed in partnership with\nthe \nAgricultural Engineering Program\n of \nUniversity of Vermont Extension\n\nwith financial support from the \nVermont Agency of Agriculture Food \n Markets\n'\nSpecialty Crop Block Grant and from the \nVermont Housing \n Conservation Board\n.\n\n\nThe \nProduce Safety Rule\n is part of the \nFood Safety Modernization Act\n\n(FSMA). This regulation focuses on setting federal regulatory standards for the\nproduction, harvest, and handling of fruits and vegetables, in an effort to\nprevent microbial contamination and reduce foodborne illnesses associated with\nfresh produce.\n\n\nThis documentation should not be considered an official list of requirements.\n\n\nIt is only intended to help farmers become familiar with using farmOS to manage\ntheir records. For more information on guidelines, refer to the FDA's\n\nFSMA Final Rule on Produce Safety\n and the \nProduce Safety Alliance\n.\n\n\nVideo walkthrough\n\n\nThe following video walkthrough was produced by Chris Callahan at the\n\nUniversity of Vermont Extension\n's \nAgricultural Engineering Program\n and\nMichael Stenta at \nFarmier\n.\n\n\n\n\n\nOverview\n\n\nThe Produce Safety module sits on top of farmOS and utilizes many of the core\nfeatures, including Plantings, Equipment, Compost, and various log types. The\ngoal is to leverage the common record keeping capabilities that are already\nprovided by farmOS, and extend them to facilitate record keeping requirements\nthat are specific to the Produce Safety Rule.\n\n\nThe following documentation pages provide guidance on how to manage general\nfarm records with farmOS:\n\n\n\n\nIntroduction\n\n\nAreas\n\n\nLogs\n\n\nAssets\n\n\nPlantings\n\n\nAnimals\n\n\nEquipment\n\n\nCompost\n\n\n\n\n\n\nPeople\n\n\n\n\nIt may also be helpful to utilize the \nCSV Import\n feature of farmOS to import\nrecords from spreadsheets.\n\n\nThe following sections describe farmOS features specific to the Produce Safety\nmodule.\n\n\nDashboard\n\n\nThe module provides a Produce Safety Dashboard (available as a tab within the\nfarmOS dashboard) which acts as an organized starting point for produce safety\nrecord keeping. Documents and files that are specific to the operations food\nsafety plan and procedures can be uploaded to the dashboard for storage and\nreference.\n\n\nQuick links are provided for managing records within each of the 5 main produce\nsafety focus areas (described below).\n\n\nLogs that are added via the quick links will automatically be assigned to the\n\"Produce Safety\" category for easier lookup in the future (as well as additional\ncategories that may be specific to the activity being recorded). Remember that\nfarmOS can be used for more than just Produce Safety record keeping, so it is\nup to you to keep your records organized in a way that makes them easy to find\nfor management and reporting purposes.\n\n\nFocus areas\n\n\nThe primary goal of the Produce Safety Rule is to prevent microbial\ncontamination and reduce foodborne illnesses associated with fresh produce. The\nregulatory requirements are divided into five main focus areas.\n\n\nWorker Health, Hygiene, and Training\n\n\nThis focuses on maintaining records to demonstrate that farm workers are\nproperly trained, are provided with stocked and sanitary facilities, and any\nhealth problems are properly documented.\n\n\nIn addition to the core log types provided by farmOS, the Produce Safety module\nadds two that are specific to the Produce Safety Rule's record keeping\nrequirements, which focus on farm workers:\n\n\n\n\nTraining\n logs are used to record details about training sessions that are\n  attended by workers on the farm. Training logs can include a list of\n  attendees, trainer(s), and details about the material that is covered.\n\n\nWorker health\n logs are used to record incidents related to worker health.\n  Injuries or illnesses that occur on the farm should be recorded with these\n  logs, and should be related to the specific area(s) that they may have\n  occurred in.\n\n\n\n\nActivity and/or observation logs should be used to record checking and\nrestocking of first aid and facilities.\n\n\nBiological Soil Amendments\n\n\nAll soil amendments should be recorded with input logs. Soil test logs should\nbe used to keep track of any lab tests that are performed.\n\n\nIf compost is being produced on the farm, it is necessary to keep records of\nproduction time, temperature measurements (via observation logs), and pile\nturnings (via activity logs), to ensure that the compost was produced in a\nmanner that reduces the risk of biological pathogens. Logs should be tagged\nwith both the \"Produce Safety\" and \"Compost\" or \"Soil\" categories, as\nappropriate.\n\n\nDomesticated and Wild Animals\n\n\nIf domesticated animals are present on the farm, they should be managed as\n\nAnimal assets\n in farmOS.\n\n\nRisk assessment should be performed (and recorded via observation logs) before\nplanting and before harvest, to reduce the risk of contamination.\n\n\nIf intrusions or contaminations are observed, they should be recorded as\nobservation logs. Corrective actions should be recorded as activity logs. Logs\nshould be tagged with both the \"Produce Safety\" and \"Animals\" categories.\n\n\nAgricultural Water\n\n\nWater test logs should be used to record lab tests that are performed on water.\nThis includes both field water (pre-harvest) and water that is used to wash\nproduce before packing (post-harvest).\n\n\nAny corrective actions that are taken should be recorded as activity logs with\ncategories of both \"Produce Safety\" and \"Water\" (these categories are applied\nautomatically by the quick links within the Produce Safety dashboard).\n\n\nEquipment, Tools, and Buildings\n\n\nAll areas relevant to produce safety (fields, buildings, facilities, etc) can\nbe managed as \nAreas\n in farmOS. Tools and equipment can be managed as\n\nEquipment\n assets.\n\n\nWhen areas or equipment are cleaned/sanitized, this should be recorded as an\nactivity log with the \"Produce Safety\" category applied.", 
            "title": "Produce Safety"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#produce-safety", 
            "text": "https://github.com/farmOS/farm_produce_safety  The Produce Safety module for farmOS provides record keeping features for the\nFSMA Produce Safety Rule in the United States, developed in partnership with\nthe  Agricultural Engineering Program  of  University of Vermont Extension \nwith financial support from the  Vermont Agency of Agriculture Food   Markets '\nSpecialty Crop Block Grant and from the  Vermont Housing   Conservation Board .  The  Produce Safety Rule  is part of the  Food Safety Modernization Act \n(FSMA). This regulation focuses on setting federal regulatory standards for the\nproduction, harvest, and handling of fruits and vegetables, in an effort to\nprevent microbial contamination and reduce foodborne illnesses associated with\nfresh produce.  This documentation should not be considered an official list of requirements.  It is only intended to help farmers become familiar with using farmOS to manage\ntheir records. For more information on guidelines, refer to the FDA's FSMA Final Rule on Produce Safety  and the  Produce Safety Alliance .", 
            "title": "Produce Safety"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#video-walkthrough", 
            "text": "The following video walkthrough was produced by Chris Callahan at the University of Vermont Extension 's  Agricultural Engineering Program  and\nMichael Stenta at  Farmier .", 
            "title": "Video walkthrough"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#overview", 
            "text": "The Produce Safety module sits on top of farmOS and utilizes many of the core\nfeatures, including Plantings, Equipment, Compost, and various log types. The\ngoal is to leverage the common record keeping capabilities that are already\nprovided by farmOS, and extend them to facilitate record keeping requirements\nthat are specific to the Produce Safety Rule.  The following documentation pages provide guidance on how to manage general\nfarm records with farmOS:   Introduction  Areas  Logs  Assets  Plantings  Animals  Equipment  Compost    People   It may also be helpful to utilize the  CSV Import  feature of farmOS to import\nrecords from spreadsheets.  The following sections describe farmOS features specific to the Produce Safety\nmodule.", 
            "title": "Overview"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#dashboard", 
            "text": "The module provides a Produce Safety Dashboard (available as a tab within the\nfarmOS dashboard) which acts as an organized starting point for produce safety\nrecord keeping. Documents and files that are specific to the operations food\nsafety plan and procedures can be uploaded to the dashboard for storage and\nreference.  Quick links are provided for managing records within each of the 5 main produce\nsafety focus areas (described below).  Logs that are added via the quick links will automatically be assigned to the\n\"Produce Safety\" category for easier lookup in the future (as well as additional\ncategories that may be specific to the activity being recorded). Remember that\nfarmOS can be used for more than just Produce Safety record keeping, so it is\nup to you to keep your records organized in a way that makes them easy to find\nfor management and reporting purposes.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#focus-areas", 
            "text": "The primary goal of the Produce Safety Rule is to prevent microbial\ncontamination and reduce foodborne illnesses associated with fresh produce. The\nregulatory requirements are divided into five main focus areas.", 
            "title": "Focus areas"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#worker-health-hygiene-and-training", 
            "text": "This focuses on maintaining records to demonstrate that farm workers are\nproperly trained, are provided with stocked and sanitary facilities, and any\nhealth problems are properly documented.  In addition to the core log types provided by farmOS, the Produce Safety module\nadds two that are specific to the Produce Safety Rule's record keeping\nrequirements, which focus on farm workers:   Training  logs are used to record details about training sessions that are\n  attended by workers on the farm. Training logs can include a list of\n  attendees, trainer(s), and details about the material that is covered.  Worker health  logs are used to record incidents related to worker health.\n  Injuries or illnesses that occur on the farm should be recorded with these\n  logs, and should be related to the specific area(s) that they may have\n  occurred in.   Activity and/or observation logs should be used to record checking and\nrestocking of first aid and facilities.", 
            "title": "Worker Health, Hygiene, and Training"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#biological-soil-amendments", 
            "text": "All soil amendments should be recorded with input logs. Soil test logs should\nbe used to keep track of any lab tests that are performed.  If compost is being produced on the farm, it is necessary to keep records of\nproduction time, temperature measurements (via observation logs), and pile\nturnings (via activity logs), to ensure that the compost was produced in a\nmanner that reduces the risk of biological pathogens. Logs should be tagged\nwith both the \"Produce Safety\" and \"Compost\" or \"Soil\" categories, as\nappropriate.", 
            "title": "Biological Soil Amendments"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#domesticated-and-wild-animals", 
            "text": "If domesticated animals are present on the farm, they should be managed as Animal assets  in farmOS.  Risk assessment should be performed (and recorded via observation logs) before\nplanting and before harvest, to reduce the risk of contamination.  If intrusions or contaminations are observed, they should be recorded as\nobservation logs. Corrective actions should be recorded as activity logs. Logs\nshould be tagged with both the \"Produce Safety\" and \"Animals\" categories.", 
            "title": "Domesticated and Wild Animals"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#agricultural-water", 
            "text": "Water test logs should be used to record lab tests that are performed on water.\nThis includes both field water (pre-harvest) and water that is used to wash\nproduce before packing (post-harvest).  Any corrective actions that are taken should be recorded as activity logs with\ncategories of both \"Produce Safety\" and \"Water\" (these categories are applied\nautomatically by the quick links within the Produce Safety dashboard).", 
            "title": "Agricultural Water"
        }, 
        {
            "location": "/guide/contrib/produce-safety/#equipment-tools-and-buildings", 
            "text": "All areas relevant to produce safety (fields, buildings, facilities, etc) can\nbe managed as  Areas  in farmOS. Tools and equipment can be managed as Equipment  assets.  When areas or equipment are cleaned/sanitized, this should be recorded as an\nactivity log with the \"Produce Safety\" category applied.", 
            "title": "Equipment, Tools, and Buildings"
        }, 
        {
            "location": "/hosting/", 
            "text": "Getting Started\n\n\n\n\n\nThis video provides an overview of the download and hosting options for farmOS\nby Michael Stenta at \nFarmier\n, how to get deeply involved with the open-source\ndevelopment community behind farmOS, or simply subscribe for a hosted version\nto start using it today.\n\n\nSince farmOS is a web application, it must be hosted on a web server. This is\ndifferent than most apps, which you simply install on your local computer or\ndevice. In contrast, farmOS is installed on a server, and you use your various\ndevices to access it over a network as a website.\n\n\nThere are two ways to get started using farmOS:\n\n\n1. DIY (host it yourself)\n\n\nfarmOS is free software, which means you are free to download the code and host\nit yourself. You can also modify and extend it to fit your needs. It is built on\n\nDrupal\n, which is a free and open-source web application framework. Drupal runs\non a web server, so it can be served to the internet 24x7. If you're familiar\nwith websites and how to host them, you can set up a farmOS site just like a\nnormal Drupal site.\n\n\nFor more information, refer to the \nfarmOS Installation Documentation\n.\n\n\n2. Subscription hosting\n\n\nFarmier\n is a subscription hosting service, started by the creator of farmOS.\nFarmier provides hosting, automatic updates, backups, SSL security, and other\nfeatures. Subscriptions help to support the continued development of farmOS,\nand are an easy way to get up and running with farmOS quickly.", 
            "title": "Getting started"
        }, 
        {
            "location": "/hosting/#getting-started", 
            "text": "This video provides an overview of the download and hosting options for farmOS\nby Michael Stenta at  Farmier , how to get deeply involved with the open-source\ndevelopment community behind farmOS, or simply subscribe for a hosted version\nto start using it today.  Since farmOS is a web application, it must be hosted on a web server. This is\ndifferent than most apps, which you simply install on your local computer or\ndevice. In contrast, farmOS is installed on a server, and you use your various\ndevices to access it over a network as a website.  There are two ways to get started using farmOS:", 
            "title": "Getting Started"
        }, 
        {
            "location": "/hosting/#1-diy-host-it-yourself", 
            "text": "farmOS is free software, which means you are free to download the code and host\nit yourself. You can also modify and extend it to fit your needs. It is built on Drupal , which is a free and open-source web application framework. Drupal runs\non a web server, so it can be served to the internet 24x7. If you're familiar\nwith websites and how to host them, you can set up a farmOS site just like a\nnormal Drupal site.  For more information, refer to the  farmOS Installation Documentation .", 
            "title": "1. DIY (host it yourself)"
        }, 
        {
            "location": "/hosting/#2-subscription-hosting", 
            "text": "Farmier  is a subscription hosting service, started by the creator of farmOS.\nFarmier provides hosting, automatic updates, backups, SSL security, and other\nfeatures. Subscriptions help to support the continued development of farmOS,\nand are an easy way to get up and running with farmOS quickly.", 
            "title": "2. Subscription hosting"
        }, 
        {
            "location": "/hosting/installing/", 
            "text": "Installation\n\n\nfarmOS is a \nDrupal distribution\n, so it is essentially a \nDrupal\n codebase that\ncombines \nDrupal core\n with a set of pre-selected contributed modules.\n\n\nRecomended release\n\n\nThe recommended approach is to download the latest release of the pre-packaged\n\nfarmOS distribution\n from Drupal.org.\n\n\nThe Drupal.org packaged release is pre-built and ready to go. Just drop it into\na hosted web server environment and it will work the same as Drupal. For more\ninformation on installing Drupal, see the official \nDrupal Installation Guide\n.\n\n\nCustom build\n\n\nAlternatively, you can also build the distribution yourself using Drush Make.\nThis is essentially what the drupal.org automatic packaging script does, so it\nis generally not necessary to do this unless you have a specific reason to.\n\n\nSimply checkout the [farmOS repository] and run the following command:\n\n\ndrush make build-farm.make farm\n\n\n\nThis will build the farmOS distribution in a directory called \"farm\". Point your\nserver's webroot to this directory (or move the contents to your server's\nwebroot) and open it in a browser to access farmOS.\n\n\nRequirements\n\n\nYou will need a web server with all the basic \nrequirements of Drupal\n.\n\n\nIn addition to Drupal's basic requirements, farmOS also needs the following:\n\n\n\n\nPHP 5.5+.\n Drupal 7 itself only requires PHP 5.2+, but farmOS makes heavy\n  use of the \nOpenlayers module\n, and includes some custom code that uses\n  newer features of PHP only available in 5.5+.\n\n\nPHP configuration\n - It is recommended that you set the following PHP\n  configuration variables, to ensure that farmOS runs smoothly. It may run fine\n  without these settings, but some features may not work properly without them.\n\n\nmemory_limit=256M\n\n\nmax_execution_time=240\n\n\nmax_input_time=240\n\n\nmax_input_vars = 5000\n\n\n\n\n\n\n\n\nOptional dependencies\n\n\nThe following are not hard requirements of farmOS, but will provide progressive\nenhancements if they are available.\n\n\n\n\nA Google Maps API key\n is necessary for rendering the Google Maps layers\n  used in farmOS maps. See the \nGoogle Maps API Key\n instructions for more\n  information about how to set this up. If an API key is not provided,\n  \nOpenStreetMap\n will be used as the default base layer.\n\n\nPHP BCMath extension\n is required for accurate geometric polygon area\n  calculations.\n\n\nGEOS - Geometry Engine, Open Source\n is required by the Area Generator\n  module.\n\n\nPostgreSQL\n + \nPostGIS\n can be used as farmOS's database backend, which\n  together provide advanced geographic query capabilities. See\n  \nGitHub issue #43\n for more information.\n\n\nSSL\n Although not strictly a requirement, some features (like the\n  \"Geolocate\" button on maps) will only work when over a secure connection. SSL\n  is also recommended if you are using the Sensor Listener module to keep your\n  sensor's private key a secret.", 
            "title": "Installing"
        }, 
        {
            "location": "/hosting/installing/#installation", 
            "text": "farmOS is a  Drupal distribution , so it is essentially a  Drupal  codebase that\ncombines  Drupal core  with a set of pre-selected contributed modules.", 
            "title": "Installation"
        }, 
        {
            "location": "/hosting/installing/#recomended-release", 
            "text": "The recommended approach is to download the latest release of the pre-packaged farmOS distribution  from Drupal.org.  The Drupal.org packaged release is pre-built and ready to go. Just drop it into\na hosted web server environment and it will work the same as Drupal. For more\ninformation on installing Drupal, see the official  Drupal Installation Guide .", 
            "title": "Recomended release"
        }, 
        {
            "location": "/hosting/installing/#custom-build", 
            "text": "Alternatively, you can also build the distribution yourself using Drush Make.\nThis is essentially what the drupal.org automatic packaging script does, so it\nis generally not necessary to do this unless you have a specific reason to.  Simply checkout the [farmOS repository] and run the following command:  drush make build-farm.make farm  This will build the farmOS distribution in a directory called \"farm\". Point your\nserver's webroot to this directory (or move the contents to your server's\nwebroot) and open it in a browser to access farmOS.", 
            "title": "Custom build"
        }, 
        {
            "location": "/hosting/installing/#requirements", 
            "text": "You will need a web server with all the basic  requirements of Drupal .  In addition to Drupal's basic requirements, farmOS also needs the following:   PHP 5.5+.  Drupal 7 itself only requires PHP 5.2+, but farmOS makes heavy\n  use of the  Openlayers module , and includes some custom code that uses\n  newer features of PHP only available in 5.5+.  PHP configuration  - It is recommended that you set the following PHP\n  configuration variables, to ensure that farmOS runs smoothly. It may run fine\n  without these settings, but some features may not work properly without them.  memory_limit=256M  max_execution_time=240  max_input_time=240  max_input_vars = 5000", 
            "title": "Requirements"
        }, 
        {
            "location": "/hosting/installing/#optional-dependencies", 
            "text": "The following are not hard requirements of farmOS, but will provide progressive\nenhancements if they are available.   A Google Maps API key  is necessary for rendering the Google Maps layers\n  used in farmOS maps. See the  Google Maps API Key  instructions for more\n  information about how to set this up. If an API key is not provided,\n   OpenStreetMap  will be used as the default base layer.  PHP BCMath extension  is required for accurate geometric polygon area\n  calculations.  GEOS - Geometry Engine, Open Source  is required by the Area Generator\n  module.  PostgreSQL  +  PostGIS  can be used as farmOS's database backend, which\n  together provide advanced geographic query capabilities. See\n   GitHub issue #43  for more information.  SSL  Although not strictly a requirement, some features (like the\n  \"Geolocate\" button on maps) will only work when over a secure connection. SSL\n  is also recommended if you are using the Sensor Listener module to keep your\n  sensor's private key a secret.", 
            "title": "Optional dependencies"
        }, 
        {
            "location": "/hosting/updating/", 
            "text": "Updating farmOS\n\n\nNew versions of farmOS will be released on a regular basis, and it's important\nto stay up-to-date so that you can receive new features, bug fixes, and security\npatches when they become available.\n\n\nUpdating farmOS is basically the same process as \nupdating Drupal core\n.\n\n\nThe general procedure is:\n\n\n\n\nBackup your code and database! Always do this before making big changes. Be\n   ready and able to roll-back in the event that something goes wrong.\n\n\nDownload the new recommended release of farmOS from\n   \nhttps://drupal.org/project/farm\n\n\nUnzip the compressed folder, and replace everything in your Drupal codebase\n   EXCEPT the \n/sites/\n folder. Do not overwrite the \n/sites/\n folder, because\n   it contains content and configuration for your site.\n\n\n\n\nClear your cache and rebuild your registry with \nDrush\n and\n   \nDrush Registry Rebuild\n. This isn't always necessary, but it doesn't hurt.\n\n\ndrush cc all\n\n\ndrush rr\n\n\n\n\n\n\nRun database updates\n.\n\n\n\n\n\n\nRevert all Features via Drush. If you have intentionally overridden any\n   specific farmOS configurations, then you should NOT do this. You will need\n   to resolve any merge conflicts with farmOS core Features changes in order to\n   complete the upgrade. See \ndeveloping with updates in mind\n.\n\n\ndrush fra", 
            "title": "Updating"
        }, 
        {
            "location": "/hosting/updating/#updating-farmos", 
            "text": "New versions of farmOS will be released on a regular basis, and it's important\nto stay up-to-date so that you can receive new features, bug fixes, and security\npatches when they become available.  Updating farmOS is basically the same process as  updating Drupal core .  The general procedure is:   Backup your code and database! Always do this before making big changes. Be\n   ready and able to roll-back in the event that something goes wrong.  Download the new recommended release of farmOS from\n    https://drupal.org/project/farm  Unzip the compressed folder, and replace everything in your Drupal codebase\n   EXCEPT the  /sites/  folder. Do not overwrite the  /sites/  folder, because\n   it contains content and configuration for your site.   Clear your cache and rebuild your registry with  Drush  and\n    Drush Registry Rebuild . This isn't always necessary, but it doesn't hurt.  drush cc all  drush rr    Run database updates .    Revert all Features via Drush. If you have intentionally overridden any\n   specific farmOS configurations, then you should NOT do this. You will need\n   to resolve any merge conflicts with farmOS core Features changes in order to\n   complete the upgrade. See  developing with updates in mind .  drush fra", 
            "title": "Updating farmOS"
        }, 
        {
            "location": "/hosting/googlemaps/", 
            "text": "Google Maps API Key\n\n\nAs of June 22nd, 2016 the Google Maps API requires an API key.\n\n\nThis means that if you are hosting farmOS yourself, you need to create an API\nkey in order to use the Google Maps base layers in farmOS maps. If an API key\nis not provided during installation, \nOpenStreetMap\n will be used as the\ndefault base layer instead.\n\n\nAnyone who had a farmOS site installed before June 22nd, 2016, and was actively\nusing it, was automatically grandfathered in and does not need an API key:\n\n\n\n\nExisting applications have been grandfathered based on their current usage to\nensure that they continue to function both now and in the future. We will\nalso be proactively contacting all existing API key users who, based on usage\ngrowth patterns, may be impacted in the future. If you\u2019re an existing user,\nplease take the time to read our Policy Update for Standard Plan summary for\ndetails on how each of these changes might affect your implementation.\n\n\n\n\nhttps://maps-apis.googleblog.com/2016/06/building-for-scale-updates-to-google.html\n\n\nTo create an API key and add it to your farmOS, do the following:\n\n\n1. Generate a Browser Key\n\n\nhttps://console.developers.google.com/apis/credentials\n\n\n2. Enable Google Maps Javascript API\n\n\nhttps://console.developers.google.com/apis/api/maps_backend/overview\n\n\n3. Enter the key into the farmOS Map configuration\n\n\na) If you are installing farmOS for the first time\n, there is a field for entering\nthe Google Maps API key during the \"Configure farmOS\" step.\n\n\nb) If you have already installed farmOS\n, you can enter the API key in the map\nconfiguration form at \n/admin/config/farm/map\n.\n\n\nNote that according to Google it may take a couple of minutes before a new\nAPI key becomes active.", 
            "title": "Google Maps"
        }, 
        {
            "location": "/hosting/googlemaps/#google-maps-api-key", 
            "text": "As of June 22nd, 2016 the Google Maps API requires an API key.  This means that if you are hosting farmOS yourself, you need to create an API\nkey in order to use the Google Maps base layers in farmOS maps. If an API key\nis not provided during installation,  OpenStreetMap  will be used as the\ndefault base layer instead.  Anyone who had a farmOS site installed before June 22nd, 2016, and was actively\nusing it, was automatically grandfathered in and does not need an API key:   Existing applications have been grandfathered based on their current usage to\nensure that they continue to function both now and in the future. We will\nalso be proactively contacting all existing API key users who, based on usage\ngrowth patterns, may be impacted in the future. If you\u2019re an existing user,\nplease take the time to read our Policy Update for Standard Plan summary for\ndetails on how each of these changes might affect your implementation.   https://maps-apis.googleblog.com/2016/06/building-for-scale-updates-to-google.html  To create an API key and add it to your farmOS, do the following:", 
            "title": "Google Maps API Key"
        }, 
        {
            "location": "/hosting/googlemaps/#1-generate-a-browser-key", 
            "text": "https://console.developers.google.com/apis/credentials", 
            "title": "1. Generate a Browser Key"
        }, 
        {
            "location": "/hosting/googlemaps/#2-enable-google-maps-javascript-api", 
            "text": "https://console.developers.google.com/apis/api/maps_backend/overview", 
            "title": "2. Enable Google Maps Javascript API"
        }, 
        {
            "location": "/hosting/googlemaps/#3-enter-the-key-into-the-farmos-map-configuration", 
            "text": "a) If you are installing farmOS for the first time , there is a field for entering\nthe Google Maps API key during the \"Configure farmOS\" step.  b) If you have already installed farmOS , you can enter the API key in the map\nconfiguration form at  /admin/config/farm/map .  Note that according to Google it may take a couple of minutes before a new\nAPI key becomes active.", 
            "title": "3. Enter the key into the farmOS Map configuration"
        }, 
        {
            "location": "/development/drupal/", 
            "text": "Drupal\n\n\nfarmOS is built on top of \nDrupal\n, a free and open-source web application\nframework.\n\n\nBasic concepts\n\n\nIf you are new to Drupal, it is recommended that you first familiarize yourself\nwith some of the basic concepts.\n\n\n\n\nDrupal concepts\n\n\n\n\nBest practices\n\n\nIn general, farmOS development follows the same best practices and coding\nstandards set forth by the Drupal community.\n\n\n\n\nDrupal best practices\n\n\nDrupal coding standards", 
            "title": "Drupal"
        }, 
        {
            "location": "/development/drupal/#drupal", 
            "text": "farmOS is built on top of  Drupal , a free and open-source web application\nframework.", 
            "title": "Drupal"
        }, 
        {
            "location": "/development/drupal/#basic-concepts", 
            "text": "If you are new to Drupal, it is recommended that you first familiarize yourself\nwith some of the basic concepts.   Drupal concepts", 
            "title": "Basic concepts"
        }, 
        {
            "location": "/development/drupal/#best-practices", 
            "text": "In general, farmOS development follows the same best practices and coding\nstandards set forth by the Drupal community.   Drupal best practices  Drupal coding standards", 
            "title": "Best practices"
        }, 
        {
            "location": "/development/projects/", 
            "text": "Projects\n\n\nfarmOS\n is built as a set of separate but inter-dependent \nDrupal\n projects.\n\n\nDrupal is a modular system, and farmOS follows in those footsteps by providing\nall of it's features as singularly-focused modules on top of Drupal core.\n\n\nAll of these various modules, their dependencies, third-party libraries, and\nthe official farmOS Drupal theme are packaged together into a\n\nfarm-focused Drupal distribution\n that is collectively referred to as \"farmOS\".\n\n\nDistributions of Drupal are roughly analogous to distributions of Linux. They\nserve to collect various code and configuration together in an intentional way.\nMore information can be found in the \nDrupal distribution documentation\n.\n\n\nTo learn more about Drupal in general, refer to the \nDrupal documentation\n.\n\n\nDistribution\n\n\n\n\nfarmOS Distribution\n\n\n\n\nThe purpose of the farmOS distribution is to collect all the modules in one\npackage, along with some default configuration, theming, etc. Drupal.org has an\nautomated packaging system, so if you are getting started with farmOS,\ndownloading and installing a packaged release is the recommended approach. See\n\ninstalling farmOS\n for more information.\n\n\nThe farmOS repository itself does not include a fully-built codebase. So if you\nclone it from drupal.org or Github, you will either need to build it yourself\nwith \nDrush\n or use \nDocker\n.\n\n\nModules\n\n\nIncluded in farmOS\n\n\nThese modules are included directly in the farmOS distribution repository:\n\n\n\n\nFarm Access\n - Provides mechanisms for managing farmOS user access\n  permissions.\n\n\nFarm Area\n - Features for managing farm areas.\n\n\nFarm Area Generator\n - A tool for automatically generating areas. Requires\n  GEOS library.\n\n\nFarm Asset\n - A farm asset entity type.\n\n\nFarm Asset Children\n - Provides child asset relationships.\n\n\nFarm Asset Property\n - Provides the ability to assign arbitrary (key-value\n  pairs) properties to assets.\n\n\nFarm Asset Views\n - Default Views of farm assets.\n\n\nFarm Calendar\n - Provides a calendar view of farmOS logs.\n\n\nFarm Constraint\n - Provides a framework for managing foreign key\n  constraints between farmOS entities.\n\n\nFarm Crop\n - Features for managing farm crops.\n\n\nFarm Dashboard\n - Provides a farmOS dashboard at /farm.\n\n\nFarm Equipment\n - Features for managing farm equipment.\n\n\nFarm Fields\n - Provides common base field definitions for farmOS entity\n  types.\n\n\nFarm Group\n - Features for managing group assets like herds, flocks, etc.\n\n\nFarm Help\n - Help pages for farmOS.\n\n\nFarm Import\n - Provides a framework for creating CSV importers in farmOS.\n\n\nFarm Inventory\n - Provides inventory management functionality for farm\n  assets.\n\n\nFarm Livestock\n - Features for managing farm livestock.\n\n\nFarm Log\n - Provides integration with the Log module.\n\n\nFarm Log: Activity\n - Provides an activity log type.\n\n\nFarm Log: Harvest\n - Provides a harvest log type.\n\n\nFarm Log: Input\n - Provides an input log type.\n\n\nFarm Log: Observation\n - Provides an observation log type\n\n\nFarm Log: Sale\n - Provides a sale log type.\n\n\nFarm Map\n - Provides OpenLayers configuration for farm maps.\n\n\nFarm MapKnitter\n - Provides integration with Public Lab's MapKnitter.org.\n\n\nFarm Menu\n - Provides a menu for farm pages.\n\n\nFarm Movement\n - Provides movement field and related asset location code.\n\n\nFarm People\n - A view of people associated with the farm.\n\n\nFarm Plan\n - A farm plan entity type.\n\n\nFarm Quantity\n - Provides a framework for dealing with quantities.\n\n\nFarm Season\n -   Provides a taxonomy and fields for organizing assets and logs by season.\n\n\nFarm Sensor\n - Features for managing farm sensors.\n\n\nFarm Sensor: Listener\n - ...\n\n\nFarm Soil\n - Provides features for soil health management.\n\n\nFarm Soil NRCS\n - Provides integration with NRCS Soil Survey data.\n\n\nFarm Soil Test\n - .Features for managing soil tests.\n\n\nFarm Soil: Compost\n - Features for managing compost.\n\n\nFarm Tour\n - Provides tours of the farmOS system using the Bootstrap Tour\n  module.\n\n\nFarm UI\n - Provides standardized user interface support to farmOS modules.\n\n\nFarm Water\n - Provides features for water management.\n\n\nFarm Water Test\n - Features for managing water tests.\n\n\n\n\nOther modules\n\n\nThese modules aren't included with the farmOS distribution, but they can be\nadded to extend your farmOS functionality:\n\n\n\n\nFarm Bee\n - Features for beekeeping.\n\n\nFarm Eggs\n - Provides a simple UI\n  for creating egg harvest logs.\n\n\nFarm Maple\n - Features for\n  management of maple tapping and production.\n\n\nFarm Map: Finland\n - Finnish map\n  layers for farmOS maps.\n\n\nFarm Map: Norway\n - Norwegian map\n  layers for farmOS maps.\n\n\nFarm Mushroom\n - Features for\n  managing mushroom production.\n\n\nFarmOS NWS\n - Imports data\n  from the National Weather Service into Drupal for use by FarmOS.\n\n\nFarm Produce Safety\n -\n  A produce safety record keeping module for farmOS.\n\n\nFarm Sensor: Atmospi\n -\n  Integrates farmOS and \nAtmospi\n sensors.\n\n\n\n\nFor more information and documentation about these modules, see\n\nfarmOS community modules\n.\n\n\nTheme\n\n\nThe official farmOS theme (\"Farm Theme\") that is included with farmOS is a\nDrupal theme based off of \nBootstrap\n.", 
            "title": "Projects"
        }, 
        {
            "location": "/development/projects/#projects", 
            "text": "farmOS  is built as a set of separate but inter-dependent  Drupal  projects.  Drupal is a modular system, and farmOS follows in those footsteps by providing\nall of it's features as singularly-focused modules on top of Drupal core.  All of these various modules, their dependencies, third-party libraries, and\nthe official farmOS Drupal theme are packaged together into a farm-focused Drupal distribution  that is collectively referred to as \"farmOS\".  Distributions of Drupal are roughly analogous to distributions of Linux. They\nserve to collect various code and configuration together in an intentional way.\nMore information can be found in the  Drupal distribution documentation .  To learn more about Drupal in general, refer to the  Drupal documentation .", 
            "title": "Projects"
        }, 
        {
            "location": "/development/projects/#distribution", 
            "text": "farmOS Distribution   The purpose of the farmOS distribution is to collect all the modules in one\npackage, along with some default configuration, theming, etc. Drupal.org has an\nautomated packaging system, so if you are getting started with farmOS,\ndownloading and installing a packaged release is the recommended approach. See installing farmOS  for more information.  The farmOS repository itself does not include a fully-built codebase. So if you\nclone it from drupal.org or Github, you will either need to build it yourself\nwith  Drush  or use  Docker .", 
            "title": "Distribution"
        }, 
        {
            "location": "/development/projects/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/development/projects/#included-in-farmos", 
            "text": "These modules are included directly in the farmOS distribution repository:   Farm Access  - Provides mechanisms for managing farmOS user access\n  permissions.  Farm Area  - Features for managing farm areas.  Farm Area Generator  - A tool for automatically generating areas. Requires\n  GEOS library.  Farm Asset  - A farm asset entity type.  Farm Asset Children  - Provides child asset relationships.  Farm Asset Property  - Provides the ability to assign arbitrary (key-value\n  pairs) properties to assets.  Farm Asset Views  - Default Views of farm assets.  Farm Calendar  - Provides a calendar view of farmOS logs.  Farm Constraint  - Provides a framework for managing foreign key\n  constraints between farmOS entities.  Farm Crop  - Features for managing farm crops.  Farm Dashboard  - Provides a farmOS dashboard at /farm.  Farm Equipment  - Features for managing farm equipment.  Farm Fields  - Provides common base field definitions for farmOS entity\n  types.  Farm Group  - Features for managing group assets like herds, flocks, etc.  Farm Help  - Help pages for farmOS.  Farm Import  - Provides a framework for creating CSV importers in farmOS.  Farm Inventory  - Provides inventory management functionality for farm\n  assets.  Farm Livestock  - Features for managing farm livestock.  Farm Log  - Provides integration with the Log module.  Farm Log: Activity  - Provides an activity log type.  Farm Log: Harvest  - Provides a harvest log type.  Farm Log: Input  - Provides an input log type.  Farm Log: Observation  - Provides an observation log type  Farm Log: Sale  - Provides a sale log type.  Farm Map  - Provides OpenLayers configuration for farm maps.  Farm MapKnitter  - Provides integration with Public Lab's MapKnitter.org.  Farm Menu  - Provides a menu for farm pages.  Farm Movement  - Provides movement field and related asset location code.  Farm People  - A view of people associated with the farm.  Farm Plan  - A farm plan entity type.  Farm Quantity  - Provides a framework for dealing with quantities.  Farm Season  -   Provides a taxonomy and fields for organizing assets and logs by season.  Farm Sensor  - Features for managing farm sensors.  Farm Sensor: Listener  - ...  Farm Soil  - Provides features for soil health management.  Farm Soil NRCS  - Provides integration with NRCS Soil Survey data.  Farm Soil Test  - .Features for managing soil tests.  Farm Soil: Compost  - Features for managing compost.  Farm Tour  - Provides tours of the farmOS system using the Bootstrap Tour\n  module.  Farm UI  - Provides standardized user interface support to farmOS modules.  Farm Water  - Provides features for water management.  Farm Water Test  - Features for managing water tests.", 
            "title": "Included in farmOS"
        }, 
        {
            "location": "/development/projects/#other-modules", 
            "text": "These modules aren't included with the farmOS distribution, but they can be\nadded to extend your farmOS functionality:   Farm Bee  - Features for beekeeping.  Farm Eggs  - Provides a simple UI\n  for creating egg harvest logs.  Farm Maple  - Features for\n  management of maple tapping and production.  Farm Map: Finland  - Finnish map\n  layers for farmOS maps.  Farm Map: Norway  - Norwegian map\n  layers for farmOS maps.  Farm Mushroom  - Features for\n  managing mushroom production.  FarmOS NWS  - Imports data\n  from the National Weather Service into Drupal for use by FarmOS.  Farm Produce Safety  -\n  A produce safety record keeping module for farmOS.  Farm Sensor: Atmospi  -\n  Integrates farmOS and  Atmospi  sensors.   For more information and documentation about these modules, see farmOS community modules .", 
            "title": "Other modules"
        }, 
        {
            "location": "/development/projects/#theme", 
            "text": "The official farmOS theme (\"Farm Theme\") that is included with farmOS is a\nDrupal theme based off of  Bootstrap .", 
            "title": "Theme"
        }, 
        {
            "location": "/development/issue-queues/", 
            "text": "Issue queues\n\n\nDrupal.org\n\n\nAll farmOS development tasks, feature requests, bug reports, and general\nplanning/discussion takes place in the Drupal.org issue queue.\n\n\nDrupal.org issue queue: \nhttps://drupal.org/project/issues/farm\n\n\nGithub\n\n\nIf you're a Github user, we also maintain an issue queue for farmOS on Github.\nYou post issues there if you prefer, and they will either be addressed there,\nor copied to Drupal.org and integrated into the roadmap.\n\n\nGithub issue queue: \nhttps://github.com/farmOS/farmOS/issues", 
            "title": "Issue Queues"
        }, 
        {
            "location": "/development/issue-queues/#issue-queues", 
            "text": "", 
            "title": "Issue queues"
        }, 
        {
            "location": "/development/issue-queues/#drupalorg", 
            "text": "All farmOS development tasks, feature requests, bug reports, and general\nplanning/discussion takes place in the Drupal.org issue queue.  Drupal.org issue queue:  https://drupal.org/project/issues/farm", 
            "title": "Drupal.org"
        }, 
        {
            "location": "/development/issue-queues/#github", 
            "text": "If you're a Github user, we also maintain an issue queue for farmOS on Github.\nYou post issues there if you prefer, and they will either be addressed there,\nor copied to Drupal.org and integrated into the roadmap.  Github issue queue:  https://github.com/farmOS/farmOS/issues", 
            "title": "Github"
        }, 
        {
            "location": "/development/architecture/", 
            "text": "Architecture\n\n\nThis video by Chris Callahan at \nUVM Extension\n's\n\nAgricultural Engineering Program\n provides an overview of the basic structural\nlayout and architectural design of FarmOS with Michael Stenta of \nFarmier\n.\nfarmOS uses areas, assets, logs and people as key components of its farm data\nmanagement approach. Learn about how these features interact to provide a\nflexible platform for farm record keeping and management. Available on YouTube:\n\nhttps://youtu.be/1wXD_K7Y_aI\n\n\n\n\n\nEntity types\n\n\nfarmOS is architected using four Drupal entity types:\n\n\n\n\nFarm Assets\n\n\nLogs\n\n\nTaxonomy Terms\n\n\nUsers\n\n\n\n\nThe Entity system in Drupal provides a standardized way of representing\ndifferent types of objects, and includes mechanisms and APIs for adding fields,\ncreating relationships to other entities, and performing actions when entities\nare created/displayed/updated/deleted. farmOS uses Drupal's entity system to\nrepresent all of its records.\n\n\nThe first three types (Farm Assets, Logs, and Taxonomy Terms) also use a Drupal\nconcept known as \"bundles\". Bundles are essentially sub-types. Each bundle can\nhave a unique set of input fields on it, which can be used to create different\ntypes of assets, logs, etc.\n\n\nTo learn more about how entity types and bundles work in Drupal, refer to\n\nAn Introduction to Entities\n in the drupal.org handbook.\n\n\nThe following is a brief overview of the entity types that farmOS uses.\n\n\nFarm Assets\n\n\nThe \"Farm Asset\" entity type is provided by the \"Farm Asset\" module, and is used\nto represent \"assets\" or \"things\" in the farm. farmOS comes with a core set of\nasset types, including Plantings, Animals, and Equipment - and more can be added\nvia contributed modules.\n\n\nLogs\n\n\nThe \"Log\" entity type is provided by the \"Log\" module, and is used to represent\nvarious types of events that are recorded on a farm (eg: activities,\nobservations, inputs, harvests, etc).\n\n\nThe \"Farm Log\" module provides a \ncore set of log types\n that can apply to any\nkind of asset. Other modules can provide more specific log types - like the\n\"Seeding\" log type, which is provided by the \"Farm Crop\" module.\n\n\nTaxonomy Terms\n\n\nTaxonomy Terms are a core Drupal entity type, and they are generally used for\ncategorization and tagging of things. Taxonomy Terms are organized into\n\"Vocabularies\", and farmOS provides a number of different vocabulary types that\nare used throughout the system.\n\n\nUsers\n\n\nUsers are a core Drupal entity type, and they provide the mechanism through\nwhich you can log into the system and use it. They represent all the different\npeople who are involved with the farm, and they can be assigned roles to grant\nthem different \nlevels of permission\n.", 
            "title": "Architecture"
        }, 
        {
            "location": "/development/architecture/#architecture", 
            "text": "This video by Chris Callahan at  UVM Extension 's Agricultural Engineering Program  provides an overview of the basic structural\nlayout and architectural design of FarmOS with Michael Stenta of  Farmier .\nfarmOS uses areas, assets, logs and people as key components of its farm data\nmanagement approach. Learn about how these features interact to provide a\nflexible platform for farm record keeping and management. Available on YouTube: https://youtu.be/1wXD_K7Y_aI", 
            "title": "Architecture"
        }, 
        {
            "location": "/development/architecture/#entity-types", 
            "text": "farmOS is architected using four Drupal entity types:   Farm Assets  Logs  Taxonomy Terms  Users   The Entity system in Drupal provides a standardized way of representing\ndifferent types of objects, and includes mechanisms and APIs for adding fields,\ncreating relationships to other entities, and performing actions when entities\nare created/displayed/updated/deleted. farmOS uses Drupal's entity system to\nrepresent all of its records.  The first three types (Farm Assets, Logs, and Taxonomy Terms) also use a Drupal\nconcept known as \"bundles\". Bundles are essentially sub-types. Each bundle can\nhave a unique set of input fields on it, which can be used to create different\ntypes of assets, logs, etc.  To learn more about how entity types and bundles work in Drupal, refer to An Introduction to Entities  in the drupal.org handbook.  The following is a brief overview of the entity types that farmOS uses.", 
            "title": "Entity types"
        }, 
        {
            "location": "/development/architecture/#farm-assets", 
            "text": "The \"Farm Asset\" entity type is provided by the \"Farm Asset\" module, and is used\nto represent \"assets\" or \"things\" in the farm. farmOS comes with a core set of\nasset types, including Plantings, Animals, and Equipment - and more can be added\nvia contributed modules.", 
            "title": "Farm Assets"
        }, 
        {
            "location": "/development/architecture/#logs", 
            "text": "The \"Log\" entity type is provided by the \"Log\" module, and is used to represent\nvarious types of events that are recorded on a farm (eg: activities,\nobservations, inputs, harvests, etc).  The \"Farm Log\" module provides a  core set of log types  that can apply to any\nkind of asset. Other modules can provide more specific log types - like the\n\"Seeding\" log type, which is provided by the \"Farm Crop\" module.", 
            "title": "Logs"
        }, 
        {
            "location": "/development/architecture/#taxonomy-terms", 
            "text": "Taxonomy Terms are a core Drupal entity type, and they are generally used for\ncategorization and tagging of things. Taxonomy Terms are organized into\n\"Vocabularies\", and farmOS provides a number of different vocabulary types that\nare used throughout the system.", 
            "title": "Taxonomy Terms"
        }, 
        {
            "location": "/development/architecture/#users", 
            "text": "Users are a core Drupal entity type, and they provide the mechanism through\nwhich you can log into the system and use it. They represent all the different\npeople who are involved with the farm, and they can be assigned roles to grant\nthem different  levels of permission .", 
            "title": "Users"
        }, 
        {
            "location": "/development/update-safety/", 
            "text": "Developing with updates in mind\n\n\nfarmOS is \nbuilt on Drupal\n, which means that it is extremely flexible. If you\nare installing your own instance of farmOS, you have full control over the\nentities, fields, Views, etc. So you can change things that farmOS sets up by\ndefault. This is great! And it's part of the reason why farmOS can grow and\nevolve so quickly. But, with great power comes great responsibility.\n\n\nThe danger of this comes when it's time to \nupdate your farmOS\n instance to a\nnew version. If you've made modifications to core fields or entity types, they\nmay no longer be compatible with the \"main line\" of farmOS development.\n\n\nThink about it like this: when you make a change to the configuration of your\nsystem, you are essentially creating a new \"branch\" of farmOS. It's no longer\ndefault farmOS, in other words. It's your own unique configuration.\n\n\nWhen a new official version of farmOS is released, your modifications may\nconflict with those in the new release. Depending on what these changes are, it\ncan be pretty easy to merge them together... or it can be a nightmare.\n\n\nSo, as a general recommendation: if you are modifying the inner workings of\nfarmOS, you should either be very familiar with what you're doing and how it\nwill affect updates, or you shouldn't do it with your live data. Set up a\nsecond testing site, make some modifications, and then open up a new issue in\nthe \nfarmOS issue queues\n and suggest your changes for inclusion in the project!", 
            "title": "Update Safety"
        }, 
        {
            "location": "/development/update-safety/#developing-with-updates-in-mind", 
            "text": "farmOS is  built on Drupal , which means that it is extremely flexible. If you\nare installing your own instance of farmOS, you have full control over the\nentities, fields, Views, etc. So you can change things that farmOS sets up by\ndefault. This is great! And it's part of the reason why farmOS can grow and\nevolve so quickly. But, with great power comes great responsibility.  The danger of this comes when it's time to  update your farmOS  instance to a\nnew version. If you've made modifications to core fields or entity types, they\nmay no longer be compatible with the \"main line\" of farmOS development.  Think about it like this: when you make a change to the configuration of your\nsystem, you are essentially creating a new \"branch\" of farmOS. It's no longer\ndefault farmOS, in other words. It's your own unique configuration.  When a new official version of farmOS is released, your modifications may\nconflict with those in the new release. Depending on what these changes are, it\ncan be pretty easy to merge them together... or it can be a nightmare.  So, as a general recommendation: if you are modifying the inner workings of\nfarmOS, you should either be very familiar with what you're doing and how it\nwill affect updates, or you shouldn't do it with your live data. Set up a\nsecond testing site, make some modifications, and then open up a new issue in\nthe  farmOS issue queues  and suggest your changes for inclusion in the project!", 
            "title": "Developing with updates in mind"
        }, 
        {
            "location": "/development/docker/", 
            "text": "farmOS on Docker\n\n\n\n\nDocker\n is an open-source project that automates the deployment of applications\ninside software containers. - \nWikipedia\n\n\n\n\nA farmOS Docker image is available on \nDocker Hub\n at\n\nhttps://hub.docker.com/r/farmos/farmos\n.\nIt is built automatically from the Dockerfile included with the\n\nfarmOS distribution\n, whenever new commits are pushed to the\n\nfarmOS GitHub repository\n.\n\n\nThis can be used for local farmOS development purposes, or for hosting your own\nfarmOS instance on a web server with the help of Docker.\n\n\nThis document primarily covers how to set up a local development environment\nwith Docker. It does not cover how to host a production farmOS instance. The\nimage should support this, but it is largely untested.\n\n\nGeneral info\n\n\nEnvironment variables\n\n\nThe farmOS Dockerfile exposes a few environment variables, which can be\noverridden when the container is run.\n\n\n\n\nFARMOS_VERSION\n - This is the tagged/packaged release of farmOS that should be\ndownloaded from drupal.org. This will be used if \nFARMOS_DEV\n is \nfalse\n (see\nbelow). This will always be the most recently packaged release of farmOS.\n\n\nFARMOS_DEV_BRANCH\n - This is the branch that should be used for development\npurposes. This will be used if \nFARMOS_DEV\n is \ntrue\n (see below). The default\nis the branch you currently have checked out.\n\n\nFARMOS_DEV\n - This is a boolean variable to specify whether you want\nto set up a development environment in the Docker container (when it is set to\n\ntrue\n), or you want to use the official packaged release defined in\n\nFARMOS_VERSION\n above (when it is set to \nfalse\n). The default is \nfalse\n. See\nmore detailed information about how this works below.\n\n\n\n\nDevelopment vs production\n\n\nThe Dockerfile can theoretically be used for either development or production\nenvironments. The farmOS codebase will be set up differently, depending on the\nstatus of the \nFARMOS_DEV\n environment variable.\n\n\nWhen \nFARMOS_DEV\n is set to \ntrue\n, farmOS is built using \ndrush make\n with the\n\n--working-copy\n flag. This ensures that a working Git directory is checked out\nfor the farmOS installation profile (in \nprofiles/farm\n within the built\ncodebase). It will use whatever branch is specified in the \nFARMOS_DEV_BRANCH\n\nvariable. The \nFARMOS_VERSION\n variable is ignored.\n\n\nWhen \nFARMOS_DEV\n is set to \nfalse\n (this is the default), then the officially\npackaged release of farmOS will be downloaded from drupal.org and unpacked in\nthe container. It will download the version specified in the \nFARMOS_VERSION\n\nvariable. The \nFARMOS_DEV_BRANCH\n variable is ignored.\n\n\nRebuilding the codebase\n\n\nThe farmOS Docker image assumes that the entire farmOS codebase (located in\n\n/var/www/html\n within the container) will be mounted on the host as a\n\nDocker volume\n. A Docker \nENTRYPOINT\n script is included to ensure that the\nfarmOS codebase is created within that volume. When the container is destroyed,\neverything in \n/var/www/html\n persists in the host volume.\n\n\nSince the farmOS codebase is built in the \nENTRYPOINT\n script, and not in the\nDockerfile, that means that updating your Docker image will not necessarily\nupdate your farmOS codebase.\n\n\nTherefore, the \nENTRTYPOINT\n script has logic to decide if/when the farmOS\ncodebase should be rebuilt. Simply put, if you are running a packaged release of\nfarmOS, and a new version of farmOS is released, all you have to do is pull an\nupdated farmOS Docker image and rebuild your container to get the new version.\n\n\nIf, on the other hand, you have a development build (\nFARMOS_DEV\n is \ntrue\n),\nthen the only way to trigger a rebuild is to delete \nprofiles/farm/farm.info\n.\nThen, stop and start your container and the farmOS development codebase will be\nrebuilt with \ndrush make\n.\n\n\nMore specifically, farmOS will be rebuilt if one of the following is true:\n\n\n\n\nprofiles/farm/farm.info\n is missing, or:\n\n\nFARMOS_DEV\n is \nfalse\n and the version string in \nprofiles/farm/farm.info\n\ndoes not match \nFARMOS_VERSION\n in the Dockerfile.\n\n\n\n\nWhen the codebase is rebuilt, everything in \n/var/www/html\n is wiped out and\nreplaced automatically, with the exception of the \n/var/www/html/sites\n\ndirectory - which is preserved across the rebuild. This ensures that Drupal's\n\nsettings.php\n, any uploaded files (in \nsites/default/files\n), and any\nadditional modules that you add to \nsites/*/modules\n are not lost when the\ncodebase is rebuilt.\n\n\nWARNING:\n If you have a development environment (created with \nFARMOS_DEV\n\nset to \ntrue\n) and you have made changes to any of the working Git repositories\nin \n/var/www/html/profiles/farm\n, they will be overwritten when the codebase is\nrebuilt. The best way to avoid this is to copy any overridden modules/themes to\nthe \nsites/all/modules\n or \nsites/all/themes\n directory so that they are\npreserved when the codebase is rebuilt.\n\n\nALSO NOTE:\n When the codebase is rebuilt, it does NOT automatically run\nupdate.php on the site. You must do this manually. See the \nUpdating farmOS\n\npage (specifically the steps for clearing cache and running database updates)\nfor more details.\n\n\nLocal development with Docker Compose\n\n\nThe recommended approach for local farmOS development in Docker is to use\n\nDocker Compose\n to build both the farmOS container and the MariaDB or\nPostgreSQL database container.\n\n\nThe \ndocker-compose.yml\n file included with farmOS sets \nFARMOS_DEV\n to \ntrue\n\nby default, so it is intended only for development purposes at this time.\n\n\nPostgreSQL + PostGIS\n\n\nIf you want to use a PostgreSQL database with the PostGIS extension, an\nadditional \ndocker-compose.postgis.yml\n file is provided which can be used to\noverride the default \ndocker-compose.yml\n database configuration.\n\n\nTo use the provided override file, use the \n-f\n flag with all \ndocker-compose\n\ncommands to read from both the \ndocker-compose.yml\n file and the\n\ndocker-compose.postgis.yml\n file. For example, instead of\n\nsudo docker-compose up\n you will run:\n\n\nsudo docker-compose -f docker-compose.yml -f docker-compose.postgis.yml up\n\n\n\nAlternatively, if you rename \ndocker-compose.postgis.yml\n to\n\ndocker-compose.override.yml\n, it will be picked up automatically and you can\nsimply use \nsudo docker-compose up\n like you would normally.\n\n\nInstall Docker and Docker Compose\n\n\nFirst, install Docker and Docker Compose:\n\n\n\n\nInstall Docker\n\n\nOn Mac OS X, use \"dlite\" (not \"Docker for Mac\" or \"Docker Toolbox\")\n\n\nOn Windows, use \"Docker for Windows\" (not \"Docker Toolbox\")\n\n\nOn Linux, follow the directions on docker.com\n\n\n\n\n\n\nInstall Docker Compose\n\n\n\n\nMac Specific Instructions\n\n\nDue to \nperformance issues\n with shared volumes in Docker for Mac, \ndlite\n is\ncurrently the suggested way to host Docker images. The following sections\ndescribe how to install dlite and start/stop containers:\n\n\nInstalling\n\n\n\n\nDownload the latest release from \ndlite releases\n on GitHub\n\n\nExtract dlite from the tarball and copy it to \n/usr/local/bin/dlite\n\n\nRun: \nchmod +x /usr/local/bin/dlite\n\n\nInitialize dlite by running: \ndlite init\n\n\nStart dlite host by running: \ndlite start\n\n\n\n\nStarting\n\n\n\n\nProceed with \nCreate Containers\n\n\nFix networking by running \ndocker network connect bridge farmos_www_1\n\n\nProceed with \nInstall farmOS\n at \nhttp://farmos_www_1.docker\n\n\n\n\nStopping\n\n\n\n\nRun: \ndocker-compose stop\n\n\nRemove networking: \ndocker network disconnect bridge farmos_www_1\n\n\n\n\nCreate containers\n\n\nTo create the farmOS Docker containers, first clone the farmOS repository:\n\n\ngit clone https://github.com/farmOS/farmOS.git \n cd farmOS\n\n\n\nThen, use \ndocker-compose up\n to create the containers:\n\n\nsudo docker-compose up\n\n\n\nThis will create two containers: a farmOS application container, and a MariaDB\ndatabase container (see \"PostgreSQL + PostGIS\" section above if you would\nrather use PostgreSQL).\n\n\nNote:\n It will take some time for the containers to start the first time.\nThis is because the farmOS codebase needs to be built when the container is run\n(it is not built in the image itself). For this reason, you might not want to\nuse the \n-d\n flag at the end of \nsudo docker-compose up\n, so that you can see\nthe progress. Once it is built, stopping and starting the container is very\nquick.\n\n\nPersistent volumes\n\n\nThe docker-compose.yml file defines two Docker volumes that will be available on\nyour host system:\n\n\n\n\n/var/html/www\n from the farmOS application container\n\n\n/var/lib/mysql\n from the MariaDB database container (or\n  \n/var/lib/postgresql/data\n if you are using PostgreSQL)\n\n\n\n\nBoth will be made available within a \n.data\n directory in the farmOS repository\non the host. This is where you will be able to access the code for development\npurposes. It is also how your database and files are persisted when the\ncontainers are destroyed and rebuilt.\n\n\nFile ownership\n\n\nOn a Linux host, all the files in \n.data\n will have an owner and group of\n\nroot\n. For development purposes, it is recommended that you change the owner\nof everything in the \nwww\n container to your local user. This can be done with\nthe following command (executed from the repository's root directory):\n\n\nsudo chown -R ${USER} .data/www\n\n\n\nThis changes the owner of \neverything\n in /var/www/html to the currently logged\nin user on the host. But it leaves the group alone.\n\n\nThis will persist until the codebase is rebuilt. When rebuilt,\n\ndocker-entrypoint.sh\n changes the owner and group of the \n.data/www/sites\n\ndirectory to \nwww-data\n. So you would need to re-run the above \nchown\n after\neach rebuild. For development environments this isn't a big problem because\nrebuilds don't happen automatically - they need to be triggered by deleting\n\nprofiles/farm/farm.info\n.\n\n\nInstall farmOS\n\n\nOnce the containers are up and running, you can install farmOS using the Drupal\ninstaller. This is a simple step-by-step process that you will need to go\nthrough when you first access the site in your browser.\n\n\nBrowser address\n\n\nIf you are running Docker on Linux, you can simply go to \nhttp://localhost\n in\nyour browser. Otherwise, you may need to look up the IP address of the Docker\ncontainer that was created and access it that way.\n\n\nTo find the IP address of your farmOS container, use the following command:\n\n\nsudo docker inspect --format '{{ .NetworkSettings.Networks.farmos_default.IPAddress }}' farmos_www_1\n\n\n\nVisit the IP address in a browser - you should see the Drupal/farmOS installer.\n\n\nDatabase setup\n\n\nIn the \"Set up database\" step of installation, use the following values:\n\n\n\n\nDatabase name: \nfarmos\n\n\nDatabase username: \nfarmos\n\n\nDatabase password: \nfarmos\n\n\nUnder \"Advanced options\", change \"Database host\" to: \ndb\n\n\n\n\nFollow the instructions to continue with the installation and you should be left\nwith a fully-functioning farmOS instance running in a Docker container!\n\n\nStop/start containers\n\n\nTo stop your running containers:\n\n\nsudo docker-compose stop\n\n\n\nTo start your containers:\n\n\nsudo docker-compose start", 
            "title": "Docker"
        }, 
        {
            "location": "/development/docker/#farmos-on-docker", 
            "text": "Docker  is an open-source project that automates the deployment of applications\ninside software containers. -  Wikipedia   A farmOS Docker image is available on  Docker Hub  at https://hub.docker.com/r/farmos/farmos .\nIt is built automatically from the Dockerfile included with the farmOS distribution , whenever new commits are pushed to the farmOS GitHub repository .  This can be used for local farmOS development purposes, or for hosting your own\nfarmOS instance on a web server with the help of Docker.  This document primarily covers how to set up a local development environment\nwith Docker. It does not cover how to host a production farmOS instance. The\nimage should support this, but it is largely untested.", 
            "title": "farmOS on Docker"
        }, 
        {
            "location": "/development/docker/#general-info", 
            "text": "", 
            "title": "General info"
        }, 
        {
            "location": "/development/docker/#environment-variables", 
            "text": "The farmOS Dockerfile exposes a few environment variables, which can be\noverridden when the container is run.   FARMOS_VERSION  - This is the tagged/packaged release of farmOS that should be\ndownloaded from drupal.org. This will be used if  FARMOS_DEV  is  false  (see\nbelow). This will always be the most recently packaged release of farmOS.  FARMOS_DEV_BRANCH  - This is the branch that should be used for development\npurposes. This will be used if  FARMOS_DEV  is  true  (see below). The default\nis the branch you currently have checked out.  FARMOS_DEV  - This is a boolean variable to specify whether you want\nto set up a development environment in the Docker container (when it is set to true ), or you want to use the official packaged release defined in FARMOS_VERSION  above (when it is set to  false ). The default is  false . See\nmore detailed information about how this works below.", 
            "title": "Environment variables"
        }, 
        {
            "location": "/development/docker/#development-vs-production", 
            "text": "The Dockerfile can theoretically be used for either development or production\nenvironments. The farmOS codebase will be set up differently, depending on the\nstatus of the  FARMOS_DEV  environment variable.  When  FARMOS_DEV  is set to  true , farmOS is built using  drush make  with the --working-copy  flag. This ensures that a working Git directory is checked out\nfor the farmOS installation profile (in  profiles/farm  within the built\ncodebase). It will use whatever branch is specified in the  FARMOS_DEV_BRANCH \nvariable. The  FARMOS_VERSION  variable is ignored.  When  FARMOS_DEV  is set to  false  (this is the default), then the officially\npackaged release of farmOS will be downloaded from drupal.org and unpacked in\nthe container. It will download the version specified in the  FARMOS_VERSION \nvariable. The  FARMOS_DEV_BRANCH  variable is ignored.", 
            "title": "Development vs production"
        }, 
        {
            "location": "/development/docker/#rebuilding-the-codebase", 
            "text": "The farmOS Docker image assumes that the entire farmOS codebase (located in /var/www/html  within the container) will be mounted on the host as a Docker volume . A Docker  ENTRYPOINT  script is included to ensure that the\nfarmOS codebase is created within that volume. When the container is destroyed,\neverything in  /var/www/html  persists in the host volume.  Since the farmOS codebase is built in the  ENTRYPOINT  script, and not in the\nDockerfile, that means that updating your Docker image will not necessarily\nupdate your farmOS codebase.  Therefore, the  ENTRTYPOINT  script has logic to decide if/when the farmOS\ncodebase should be rebuilt. Simply put, if you are running a packaged release of\nfarmOS, and a new version of farmOS is released, all you have to do is pull an\nupdated farmOS Docker image and rebuild your container to get the new version.  If, on the other hand, you have a development build ( FARMOS_DEV  is  true ),\nthen the only way to trigger a rebuild is to delete  profiles/farm/farm.info .\nThen, stop and start your container and the farmOS development codebase will be\nrebuilt with  drush make .  More specifically, farmOS will be rebuilt if one of the following is true:   profiles/farm/farm.info  is missing, or:  FARMOS_DEV  is  false  and the version string in  profiles/farm/farm.info \ndoes not match  FARMOS_VERSION  in the Dockerfile.   When the codebase is rebuilt, everything in  /var/www/html  is wiped out and\nreplaced automatically, with the exception of the  /var/www/html/sites \ndirectory - which is preserved across the rebuild. This ensures that Drupal's settings.php , any uploaded files (in  sites/default/files ), and any\nadditional modules that you add to  sites/*/modules  are not lost when the\ncodebase is rebuilt.  WARNING:  If you have a development environment (created with  FARMOS_DEV \nset to  true ) and you have made changes to any of the working Git repositories\nin  /var/www/html/profiles/farm , they will be overwritten when the codebase is\nrebuilt. The best way to avoid this is to copy any overridden modules/themes to\nthe  sites/all/modules  or  sites/all/themes  directory so that they are\npreserved when the codebase is rebuilt.  ALSO NOTE:  When the codebase is rebuilt, it does NOT automatically run\nupdate.php on the site. You must do this manually. See the  Updating farmOS \npage (specifically the steps for clearing cache and running database updates)\nfor more details.", 
            "title": "Rebuilding the codebase"
        }, 
        {
            "location": "/development/docker/#local-development-with-docker-compose", 
            "text": "The recommended approach for local farmOS development in Docker is to use Docker Compose  to build both the farmOS container and the MariaDB or\nPostgreSQL database container.  The  docker-compose.yml  file included with farmOS sets  FARMOS_DEV  to  true \nby default, so it is intended only for development purposes at this time.", 
            "title": "Local development with Docker Compose"
        }, 
        {
            "location": "/development/docker/#postgresql-postgis", 
            "text": "If you want to use a PostgreSQL database with the PostGIS extension, an\nadditional  docker-compose.postgis.yml  file is provided which can be used to\noverride the default  docker-compose.yml  database configuration.  To use the provided override file, use the  -f  flag with all  docker-compose \ncommands to read from both the  docker-compose.yml  file and the docker-compose.postgis.yml  file. For example, instead of sudo docker-compose up  you will run:  sudo docker-compose -f docker-compose.yml -f docker-compose.postgis.yml up  Alternatively, if you rename  docker-compose.postgis.yml  to docker-compose.override.yml , it will be picked up automatically and you can\nsimply use  sudo docker-compose up  like you would normally.", 
            "title": "PostgreSQL + PostGIS"
        }, 
        {
            "location": "/development/docker/#install-docker-and-docker-compose", 
            "text": "First, install Docker and Docker Compose:   Install Docker  On Mac OS X, use \"dlite\" (not \"Docker for Mac\" or \"Docker Toolbox\")  On Windows, use \"Docker for Windows\" (not \"Docker Toolbox\")  On Linux, follow the directions on docker.com    Install Docker Compose", 
            "title": "Install Docker and Docker Compose"
        }, 
        {
            "location": "/development/docker/#mac-specific-instructions", 
            "text": "Due to  performance issues  with shared volumes in Docker for Mac,  dlite  is\ncurrently the suggested way to host Docker images. The following sections\ndescribe how to install dlite and start/stop containers:", 
            "title": "Mac Specific Instructions"
        }, 
        {
            "location": "/development/docker/#installing", 
            "text": "Download the latest release from  dlite releases  on GitHub  Extract dlite from the tarball and copy it to  /usr/local/bin/dlite  Run:  chmod +x /usr/local/bin/dlite  Initialize dlite by running:  dlite init  Start dlite host by running:  dlite start", 
            "title": "Installing"
        }, 
        {
            "location": "/development/docker/#starting", 
            "text": "Proceed with  Create Containers  Fix networking by running  docker network connect bridge farmos_www_1  Proceed with  Install farmOS  at  http://farmos_www_1.docker", 
            "title": "Starting"
        }, 
        {
            "location": "/development/docker/#stopping", 
            "text": "Run:  docker-compose stop  Remove networking:  docker network disconnect bridge farmos_www_1", 
            "title": "Stopping"
        }, 
        {
            "location": "/development/docker/#create-containers", 
            "text": "To create the farmOS Docker containers, first clone the farmOS repository:  git clone https://github.com/farmOS/farmOS.git   cd farmOS  Then, use  docker-compose up  to create the containers:  sudo docker-compose up  This will create two containers: a farmOS application container, and a MariaDB\ndatabase container (see \"PostgreSQL + PostGIS\" section above if you would\nrather use PostgreSQL).  Note:  It will take some time for the containers to start the first time.\nThis is because the farmOS codebase needs to be built when the container is run\n(it is not built in the image itself). For this reason, you might not want to\nuse the  -d  flag at the end of  sudo docker-compose up , so that you can see\nthe progress. Once it is built, stopping and starting the container is very\nquick.", 
            "title": "Create containers"
        }, 
        {
            "location": "/development/docker/#persistent-volumes", 
            "text": "The docker-compose.yml file defines two Docker volumes that will be available on\nyour host system:   /var/html/www  from the farmOS application container  /var/lib/mysql  from the MariaDB database container (or\n   /var/lib/postgresql/data  if you are using PostgreSQL)   Both will be made available within a  .data  directory in the farmOS repository\non the host. This is where you will be able to access the code for development\npurposes. It is also how your database and files are persisted when the\ncontainers are destroyed and rebuilt.", 
            "title": "Persistent volumes"
        }, 
        {
            "location": "/development/docker/#file-ownership", 
            "text": "On a Linux host, all the files in  .data  will have an owner and group of root . For development purposes, it is recommended that you change the owner\nof everything in the  www  container to your local user. This can be done with\nthe following command (executed from the repository's root directory):  sudo chown -R ${USER} .data/www  This changes the owner of  everything  in /var/www/html to the currently logged\nin user on the host. But it leaves the group alone.  This will persist until the codebase is rebuilt. When rebuilt, docker-entrypoint.sh  changes the owner and group of the  .data/www/sites \ndirectory to  www-data . So you would need to re-run the above  chown  after\neach rebuild. For development environments this isn't a big problem because\nrebuilds don't happen automatically - they need to be triggered by deleting profiles/farm/farm.info .", 
            "title": "File ownership"
        }, 
        {
            "location": "/development/docker/#install-farmos", 
            "text": "Once the containers are up and running, you can install farmOS using the Drupal\ninstaller. This is a simple step-by-step process that you will need to go\nthrough when you first access the site in your browser.", 
            "title": "Install farmOS"
        }, 
        {
            "location": "/development/docker/#browser-address", 
            "text": "If you are running Docker on Linux, you can simply go to  http://localhost  in\nyour browser. Otherwise, you may need to look up the IP address of the Docker\ncontainer that was created and access it that way.  To find the IP address of your farmOS container, use the following command:  sudo docker inspect --format '{{ .NetworkSettings.Networks.farmos_default.IPAddress }}' farmos_www_1  Visit the IP address in a browser - you should see the Drupal/farmOS installer.", 
            "title": "Browser address"
        }, 
        {
            "location": "/development/docker/#database-setup", 
            "text": "In the \"Set up database\" step of installation, use the following values:   Database name:  farmos  Database username:  farmos  Database password:  farmos  Under \"Advanced options\", change \"Database host\" to:  db   Follow the instructions to continue with the installation and you should be left\nwith a fully-functioning farmOS instance running in a Docker container!", 
            "title": "Database setup"
        }, 
        {
            "location": "/development/docker/#stopstart-containers", 
            "text": "To stop your running containers:  sudo docker-compose stop  To start your containers:  sudo docker-compose start", 
            "title": "Stop/start containers"
        }, 
        {
            "location": "/community/contribute/", 
            "text": "Contribute\n\n\nThere are many ways to get involved in the farmOS community! You don't need to\nbe a programmer.\n\n\nUse farmOS\n\n\nFirst and foremost: use farmOS!\n\n\nBuilding a critical mass of farmOS users is the best way for the project to grow\nand thrive.\n\n\nIf you are not already in the habit of tracking your farm's assets and\nactivities, farmOS is a great tool to get started with.\n\n\nOr, if you know farmers who are in need of a record keeping tool - tell them\nabout farmOS!\n\n\nFarmier\n offers farmOS hosting, and all proceeds go towards future development.\n\n\nFeature requests, Bug reports, etc\n\n\nIf you have ideas for new features or modules that can be built on farmOS, or\nif you find bugs, add them to the \nissue queues\n.\n\n\nPlanning and General Discussion\n\n\nThe farmOS community hosts a \nfarmOS Monthly Call\n via Google Hangouts. Anyone\nis welcome to join.\n\n\nYou can also chat with people any time in the \n#farmOS IRC channel on Freenode\n.\n\n\nSponsor Development\n\n\nIf you would like to see a specific feature in farmOS, consider sponsoring its\ndevelopment. Create a new support or feature request in the \nissue queues\n to\nget started.\n\n\nAll development thusfar has been done by volunteers in their free time. Showing\nsupport with a donation or other financial contribution is a great way to help\nthe project move forward.\n\n\nDocumentation\n\n\nIf you are interested in helping with documentation, create a new issue in the\n\nGithub issue queue\n. Or, fork the \nfarmOS.org repository\n on Github, make\nchanges, and create a pull request.\n\n\nDevelopment\n\n\nAre you a Drupal developer? Or a front-end JS developer? Or just a farmer with\nsome free time this winter? Consider getting involved in the farmOS development\nprocess. There's a lot to do! And the more folks who can get involved, the more\nwe'll get done! Feel free to jump into the \nissue queues\n to get started!", 
            "title": "Contribute"
        }, 
        {
            "location": "/community/contribute/#contribute", 
            "text": "There are many ways to get involved in the farmOS community! You don't need to\nbe a programmer.", 
            "title": "Contribute"
        }, 
        {
            "location": "/community/contribute/#use-farmos", 
            "text": "First and foremost: use farmOS!  Building a critical mass of farmOS users is the best way for the project to grow\nand thrive.  If you are not already in the habit of tracking your farm's assets and\nactivities, farmOS is a great tool to get started with.  Or, if you know farmers who are in need of a record keeping tool - tell them\nabout farmOS!  Farmier  offers farmOS hosting, and all proceeds go towards future development.", 
            "title": "Use farmOS"
        }, 
        {
            "location": "/community/contribute/#feature-requests-bug-reports-etc", 
            "text": "If you have ideas for new features or modules that can be built on farmOS, or\nif you find bugs, add them to the  issue queues .", 
            "title": "Feature requests, Bug reports, etc"
        }, 
        {
            "location": "/community/contribute/#planning-and-general-discussion", 
            "text": "The farmOS community hosts a  farmOS Monthly Call  via Google Hangouts. Anyone\nis welcome to join.  You can also chat with people any time in the  #farmOS IRC channel on Freenode .", 
            "title": "Planning and General Discussion"
        }, 
        {
            "location": "/community/contribute/#sponsor-development", 
            "text": "If you would like to see a specific feature in farmOS, consider sponsoring its\ndevelopment. Create a new support or feature request in the  issue queues  to\nget started.  All development thusfar has been done by volunteers in their free time. Showing\nsupport with a donation or other financial contribution is a great way to help\nthe project move forward.", 
            "title": "Sponsor Development"
        }, 
        {
            "location": "/community/contribute/#documentation", 
            "text": "If you are interested in helping with documentation, create a new issue in the Github issue queue . Or, fork the  farmOS.org repository  on Github, make\nchanges, and create a pull request.", 
            "title": "Documentation"
        }, 
        {
            "location": "/community/contribute/#development", 
            "text": "Are you a Drupal developer? Or a front-end JS developer? Or just a farmer with\nsome free time this winter? Consider getting involved in the farmOS development\nprocess. There's a lot to do! And the more folks who can get involved, the more\nwe'll get done! Feel free to jump into the  issue queues  to get started!", 
            "title": "Development"
        }, 
        {
            "location": "/community/monthly-call/", 
            "text": "Monthly Call\n\n\nThe farmOS community hosts a monthly call via Google Hangouts. Anyone is\nwelcome to join. Ask questions, brainstorm ideas, or just talk farming.\n\n\nRefer to the schedule below, and use the \"Join Hangout\" link to join the call.\n\n\nJoin Hangout\n\n\nCalls are currently held on the second Wednesday of the month, at 1pm Eastern\nUS time.\n\n\nNote that Daylight Savings Time is observed in the US, so the time relative to\nGMT will change twice a year. The schedule below shows that, along with the\nactual GMT times for each call.\n\n\n2018 Schedule\n\n\nJanuary 10th @ 1pm EST / 6pm UTC\n (\ncancelled due to flu\n)\n\n\nFebruary 14th @ 1pm EST / 6pm UTC\n\n\nMarch 14th @ 1pm EDT / 5pm UTC\n\n\nApril 11th @ 1pm EDT / 5pm UTC\n\n\nMay 9th @ 1pm EDT / 5pm UTC\n\n\nJune 13th @ 1pm EDT / 5pm UTC\n\n\nJuly 11th @ 1pm EDT / 5pm UTC\n\n\nAugust 8th @ 1pm EDT / 5pm UTC\n\n\nSeptember 12th @ 1pm EDT / 5pm UTC\n\n\nOctober 10th @ 1pm EDT / 5pm UTC\n\n\nNovember 14th @ 1pm EST / 6pm UTC\n\n\nDecember 12th @ 1pm EST / 6pm UTC", 
            "title": "Monthly Call"
        }, 
        {
            "location": "/community/monthly-call/#monthly-call", 
            "text": "The farmOS community hosts a monthly call via Google Hangouts. Anyone is\nwelcome to join. Ask questions, brainstorm ideas, or just talk farming.  Refer to the schedule below, and use the \"Join Hangout\" link to join the call.", 
            "title": "Monthly Call"
        }, 
        {
            "location": "/community/monthly-call/#join-hangout", 
            "text": "Calls are currently held on the second Wednesday of the month, at 1pm Eastern\nUS time.  Note that Daylight Savings Time is observed in the US, so the time relative to\nGMT will change twice a year. The schedule below shows that, along with the\nactual GMT times for each call.", 
            "title": "Join Hangout"
        }, 
        {
            "location": "/community/monthly-call/#2018-schedule", 
            "text": "January 10th @ 1pm EST / 6pm UTC  ( cancelled due to flu )  February 14th @ 1pm EST / 6pm UTC  March 14th @ 1pm EDT / 5pm UTC  April 11th @ 1pm EDT / 5pm UTC  May 9th @ 1pm EDT / 5pm UTC  June 13th @ 1pm EDT / 5pm UTC  July 11th @ 1pm EDT / 5pm UTC  August 8th @ 1pm EDT / 5pm UTC  September 12th @ 1pm EDT / 5pm UTC  October 10th @ 1pm EDT / 5pm UTC  November 14th @ 1pm EST / 6pm UTC  December 12th @ 1pm EST / 6pm UTC", 
            "title": "2018 Schedule"
        }, 
        {
            "location": "/community/farms/", 
            "text": "Farms using farmOS\n\n\nThe following is a list of farms using farmOS. If you want your farm to be\nincluded in this list, add a comment to \nthis issue on Github\n.\n\n\nAustralia\n\n\n\n\nEagle View Farm (Buckley, Victoria)\n\n\n\n\nCanada\n\n\n\n\nGolden Maple Farm (Victoria, British Columbia)\n\n\n\n\nBrazil\n\n\n\n\nOlivopampa (Santana do Livramento, Rio Grande do Sul)\n\n\n\n\nFiji\n\n\n\n\nNaitauba Gardens (Naitauba Island, Northern Lau Group)\n\n\n\n\nJamaica\n\n\n\n\nGrierfield Farms (Grierfield, St Ann)\n\n\n\n\nPoland\n\n\n\n\nPiotr Ma\u0142kowski (Do\u0142ubowo, Podlasie)\n\n\n\n\nUnited States\n\n\n\n\nAll In Farm (Georgetown, Texas)\n\n\nCloud 9 Ranch (Greeneville, Tennessee)\n\n\nCounter Culture Organic Farm (Waialua, Hawai\ni)\n\n\nDouble Doc Ranch (Shell, Wyoming)\n\n\nFoodScaping Permaculture Farm (Cheshire, Oregon)\n\n\nHampton Plantation (Owings, Maryland)\n\n\nLokoea Farms (Haleiwa, Hawai\ni)\n\n\nMiles Smith Farm (Loudon, New Hampshire)\n\n\nMoonstone Farm (Saranac Lake, New York)\n\n\nNorth Mountain Pastures (Newport, Pennsylvania)\n\n\nPatroon Land Farm (Voorheesville, New York)\n\n\nRed Shirt Farm (Lanesborough, Massachusetts)\n\n\nSilver Market Gardens (Silver City, New Mexico)\n\n\nStone Grown Farm (Mansfield, Connecticut)\n\n\nTuckaway Farm (Lee, New Hampshire)\n\n\nUniversity of New Hampshire (Durham, New Hampshire)\n\n\nWalden Creek Farm (Elgin, Texas)\n\n\nWolfe's Neck Farm (Freeport, Maine)", 
            "title": "Farms"
        }, 
        {
            "location": "/community/farms/#farms-using-farmos", 
            "text": "The following is a list of farms using farmOS. If you want your farm to be\nincluded in this list, add a comment to  this issue on Github .", 
            "title": "Farms using farmOS"
        }, 
        {
            "location": "/community/farms/#australia", 
            "text": "Eagle View Farm (Buckley, Victoria)", 
            "title": "Australia"
        }, 
        {
            "location": "/community/farms/#canada", 
            "text": "Golden Maple Farm (Victoria, British Columbia)", 
            "title": "Canada"
        }, 
        {
            "location": "/community/farms/#brazil", 
            "text": "Olivopampa (Santana do Livramento, Rio Grande do Sul)", 
            "title": "Brazil"
        }, 
        {
            "location": "/community/farms/#fiji", 
            "text": "Naitauba Gardens (Naitauba Island, Northern Lau Group)", 
            "title": "Fiji"
        }, 
        {
            "location": "/community/farms/#jamaica", 
            "text": "Grierfield Farms (Grierfield, St Ann)", 
            "title": "Jamaica"
        }, 
        {
            "location": "/community/farms/#poland", 
            "text": "Piotr Ma\u0142kowski (Do\u0142ubowo, Podlasie)", 
            "title": "Poland"
        }, 
        {
            "location": "/community/farms/#united-states", 
            "text": "All In Farm (Georgetown, Texas)  Cloud 9 Ranch (Greeneville, Tennessee)  Counter Culture Organic Farm (Waialua, Hawai i)  Double Doc Ranch (Shell, Wyoming)  FoodScaping Permaculture Farm (Cheshire, Oregon)  Hampton Plantation (Owings, Maryland)  Lokoea Farms (Haleiwa, Hawai i)  Miles Smith Farm (Loudon, New Hampshire)  Moonstone Farm (Saranac Lake, New York)  North Mountain Pastures (Newport, Pennsylvania)  Patroon Land Farm (Voorheesville, New York)  Red Shirt Farm (Lanesborough, Massachusetts)  Silver Market Gardens (Silver City, New Mexico)  Stone Grown Farm (Mansfield, Connecticut)  Tuckaway Farm (Lee, New Hampshire)  University of New Hampshire (Durham, New Hampshire)  Walden Creek Farm (Elgin, Texas)  Wolfe's Neck Farm (Freeport, Maine)", 
            "title": "United States"
        }, 
        {
            "location": "/community/maintainers/", 
            "text": "Maintainers\n\n\n\n\nMichael Stenta\n\n\n\n\nDrupal.org: \nm.stenta\n\n\nGithub: \nmstenta", 
            "title": "Maintainers"
        }, 
        {
            "location": "/community/maintainers/#maintainers", 
            "text": "", 
            "title": "Maintainers"
        }, 
        {
            "location": "/community/maintainers/#michael-stenta", 
            "text": "Drupal.org:  m.stenta  Github:  mstenta", 
            "title": "Michael Stenta"
        }, 
        {
            "location": "/community/supporters/", 
            "text": "Supporters\n\n\nThe farmOS project is made possible by many supporters.\n\n\nOrganizations\n\n\n\n\nFarmier\n\n\nFarm Hack\n\n\nGreen Start\n\n\nCornell Soil Health\n\n\nOpen Pipe Kit\n\n\nPublic Lab\n\n\nMapKnitter\n\n\nUSDA/NRCS Soil Survey\n\n\nGODAN\n\n\nThe Agroecology Lab\n\n\nStrafford County Conservation District\n\n\nCheshire County Conservation District\n\n\nSullivan County Conservation District\n\n\nCoos County Conservation District\n\n\nLong Island Sound RCPP\n\n\nPennsylvania Association for Sustainable Agriculture\n\n\nUniversity of Vermont Extension\n\n\nVermont Agency of Agriculture Food \n Markets\n\n\nVermont Housing \n Conservation Board\n\n\nBionutrient Food Association\n\n\nGlobetrotter Foundation\n\n\n\n\nIndividuals\n\n\n\n\nMichael Stenta\n\n\nDorn Cox\n\n\nRJ Steinert\n\n\nBruce Dawson\n\n\nPol Dellaiera\n\n\nPhil Anzel\n\n\nJeff Warren\n\n\nSam Chapatwala\n\n\nJoel Baranick\n\n\nSvenn Are Bjerkem\n\n\nKenny Robinson\n\n\nDan Kittredge\n\n\nDavid Forster\n\n\nGreg Austic\n\n\nBrooks Miller\n\n\nFranklin Egan\n\n\nChris Callahan\n\n\nStephen Woodbridge\n\n\nAndy Grimley\n\n\nSallie Calhoun", 
            "title": "Supporters"
        }, 
        {
            "location": "/community/supporters/#supporters", 
            "text": "The farmOS project is made possible by many supporters.", 
            "title": "Supporters"
        }, 
        {
            "location": "/community/supporters/#organizations", 
            "text": "Farmier  Farm Hack  Green Start  Cornell Soil Health  Open Pipe Kit  Public Lab  MapKnitter  USDA/NRCS Soil Survey  GODAN  The Agroecology Lab  Strafford County Conservation District  Cheshire County Conservation District  Sullivan County Conservation District  Coos County Conservation District  Long Island Sound RCPP  Pennsylvania Association for Sustainable Agriculture  University of Vermont Extension  Vermont Agency of Agriculture Food   Markets  Vermont Housing   Conservation Board  Bionutrient Food Association  Globetrotter Foundation", 
            "title": "Organizations"
        }, 
        {
            "location": "/community/supporters/#individuals", 
            "text": "Michael Stenta  Dorn Cox  RJ Steinert  Bruce Dawson  Pol Dellaiera  Phil Anzel  Jeff Warren  Sam Chapatwala  Joel Baranick  Svenn Are Bjerkem  Kenny Robinson  Dan Kittredge  David Forster  Greg Austic  Brooks Miller  Franklin Egan  Chris Callahan  Stephen Woodbridge  Andy Grimley  Sallie Calhoun", 
            "title": "Individuals"
        }, 
        {
            "location": "/community/press/", 
            "text": "Press\n\n\nfarmOS has been featured in the following articles. If you would like to write\nabout farmOS, \ncontact m.stenta\n.\n\n\n2017\n\n\n2017 August 28th\n \nPASA Education Event - Pastured Livestock Research Group: Boosting Land and Feed Efficiency\n\n\n2017 April 5th\n \nPASA Education Event - Advanced Farm Management Using FarmOS\n\n\n2017 March 14th\n \nTech Economy: Precision farming: la sfida dell\u2019agricoltura 4.0 \u00e8 open source\n\n\n2017 January 24th\n \nAgroTIC: Les nouvelles technologies sont aussi un levier pour les petites exploitations\n\n\n2017 January 10th\n \nPermaculture Research Institute: Open Source Tools for Permaculturists\n\n\n2016\n\n\n2016 December 6th\n \nFOSS Force: Family Farming and Open Source Wireless Networking\n\n\n2016 December 5th\n \nCNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers\n\n\n2016 November 24th\n \nGODAN: OPEN FARMS - GODAN Documentary Web Series - Episode 3\n\n\n2016 November 22nd\n \nCNBC: Silicon Valley cultivates a life on the American family farm\n\n\n2016 November 4th\n \nPC Magazine: Smart Farms: Big Data Meets Big Ag\n\n\n2016 September 20th\n \nFarm Hack: Farm Hack @ the Smithsonian Cooper Hewitt Design Museum\n\n\n2016 September 4th\n \nCT NOFA Geanings Newsletter: farmOS Workshop at 2016 NOFA Summer Conference on YouTube\n\n\n2016 August 29th\n \nFarm Hack: Video: FarmOS @ NOFA summer conference\n\n\n2016 July 30th\n \nATTRA Sustainable Agriculture: farmOS Releases Beta 12 Version and Beekeeping Module\n\n\n2016 May 16th\n \nSanmita: Three Cool Drupal-Based Software Projects\n\n\n2016 April 19th\n \nCooper Hewitt: COOPER HEWITT TO PRESENT \"BY THE PEOPLE: DESIGNING A BETTER AMERICA\"\n\n\n2016 April 1st\n \nLancaster Farming: Using 'Big Data' Can Prevent Big Problems on the Farm\n\n\n2016 February 5th\n \nMaryland Organic Food \n Farming Association: Open Source Agricultural Tools with Farm Hack\n\n\n2015\n\n\n2015 December 13th\n \nFarm Hack: FarmOS: A Drupal-based farm management solution\n\n\n2015 November 30th\n \nFarm Hack: Integrating Open Source: the Open Agriculture Learning Series\n\n\n2015 November 27th\n \nopensource.com: Top 5: Drupal-based farmOS, Blender for astrophysics, Qora cryptocurrency, and more\n\n\n2015 November 24th\n \nopensource.com: Drupal-based farmOS manages food, farmers, and community\n\n\n2015 November 16th\n \nMakery: Sensprout and Techrice, Japanese prototypes for agriculture\n\n\n2015 November 9th\n \nThe Greenhorns: it\u2019s like a csa \u2013 but with software\n\n\n2015 October 2nd\n \nHNGN: Robots, iPhones Now Make Tending Crops Easier For Farmers\n\n\n2015 September 22nd\n \nPopular Science: Let the Robots and iPhones Tend the Crops\n\n\n2015 April 19th\n \nThe Greenhorns: proving that not all farmers are luddites\n\n\n2015 March 30th\n \nThe Greenhorns: farmOS beta 1 release\n\n\n2014\n\n\n2014 December 25th\n \nOur World (United Nations University): Open Sauce/Source for the Food Revolution\n\n\n2014 November 27th\n \nopensource.com: The new food revolution is open", 
            "title": "Press"
        }, 
        {
            "location": "/community/press/#press", 
            "text": "farmOS has been featured in the following articles. If you would like to write\nabout farmOS,  contact m.stenta .", 
            "title": "Press"
        }, 
        {
            "location": "/community/press/#2017", 
            "text": "2017 August 28th   PASA Education Event - Pastured Livestock Research Group: Boosting Land and Feed Efficiency  2017 April 5th   PASA Education Event - Advanced Farm Management Using FarmOS  2017 March 14th   Tech Economy: Precision farming: la sfida dell\u2019agricoltura 4.0 \u00e8 open source  2017 January 24th   AgroTIC: Les nouvelles technologies sont aussi un levier pour les petites exploitations  2017 January 10th   Permaculture Research Institute: Open Source Tools for Permaculturists", 
            "title": "2017"
        }, 
        {
            "location": "/community/press/#2016", 
            "text": "2016 December 6th   FOSS Force: Family Farming and Open Source Wireless Networking  2016 December 5th   CNBC: The Future Of Farming Is Utilizing Data In An Open Source Network Of Farmers  2016 November 24th   GODAN: OPEN FARMS - GODAN Documentary Web Series - Episode 3  2016 November 22nd   CNBC: Silicon Valley cultivates a life on the American family farm  2016 November 4th   PC Magazine: Smart Farms: Big Data Meets Big Ag  2016 September 20th   Farm Hack: Farm Hack @ the Smithsonian Cooper Hewitt Design Museum  2016 September 4th   CT NOFA Geanings Newsletter: farmOS Workshop at 2016 NOFA Summer Conference on YouTube  2016 August 29th   Farm Hack: Video: FarmOS @ NOFA summer conference  2016 July 30th   ATTRA Sustainable Agriculture: farmOS Releases Beta 12 Version and Beekeeping Module  2016 May 16th   Sanmita: Three Cool Drupal-Based Software Projects  2016 April 19th   Cooper Hewitt: COOPER HEWITT TO PRESENT \"BY THE PEOPLE: DESIGNING A BETTER AMERICA\"  2016 April 1st   Lancaster Farming: Using 'Big Data' Can Prevent Big Problems on the Farm  2016 February 5th   Maryland Organic Food   Farming Association: Open Source Agricultural Tools with Farm Hack", 
            "title": "2016"
        }, 
        {
            "location": "/community/press/#2015", 
            "text": "2015 December 13th   Farm Hack: FarmOS: A Drupal-based farm management solution  2015 November 30th   Farm Hack: Integrating Open Source: the Open Agriculture Learning Series  2015 November 27th   opensource.com: Top 5: Drupal-based farmOS, Blender for astrophysics, Qora cryptocurrency, and more  2015 November 24th   opensource.com: Drupal-based farmOS manages food, farmers, and community  2015 November 16th   Makery: Sensprout and Techrice, Japanese prototypes for agriculture  2015 November 9th   The Greenhorns: it\u2019s like a csa \u2013 but with software  2015 October 2nd   HNGN: Robots, iPhones Now Make Tending Crops Easier For Farmers  2015 September 22nd   Popular Science: Let the Robots and iPhones Tend the Crops  2015 April 19th   The Greenhorns: proving that not all farmers are luddites  2015 March 30th   The Greenhorns: farmOS beta 1 release", 
            "title": "2015"
        }, 
        {
            "location": "/community/press/#2014", 
            "text": "2014 December 25th   Our World (United Nations University): Open Sauce/Source for the Food Revolution  2014 November 27th   opensource.com: The new food revolution is open", 
            "title": "2014"
        }, 
        {
            "location": "/community/trademark/", 
            "text": "farmOS Trademark Guidelines\n\n\nVersion 1.0, November 2016\n\n\nIntroduction\n\n\nThis document, the \"Policy,\" outlines the farmOS project's (the \"Project\")\npolicy for the use of our trademarks. While our software is available under a\nfree and open source software license, the copyright license does not include an\nimplied right or license to use our trademark.\n\n\nThe role of trademarks is to provide assurance about the quality of the products\nor services with which the trademark is associated. But because an open source\nlicense allows your unrestricted modification of the copyrighted software, we\ncannot be sure that your modifications to the software are ones that will not be\nmisleading if distributed under the same name. Instead, this Policy describes\nthe circumstances under which you may use our trademarks.\n\n\nIn this Policy we are not trying to limit the lawful use of our trademarks, but\nrather describe for you what we consider the parameters of lawful use to be.\nTrademark law can be ambiguous, so we hope to provide enough clarity for you to\nunderstand whether we will consider your use licensed or non-infringing.\n\n\nThe sections that follow describe what trademarks are covered by this Policy, as\nwell as uses of the trademarks that are allowed without additional permission\nfrom us. If you want to use our trademarks in ways that are not described in\nthis Policy, please see \"Where to get further information\" below for contact\ninformation. Any use that does not comply with this Policy or for which we have\nnot separately provided written permission is not a use that we have approved,\nso you must decide for yourself whether the use is nevertheless lawful.\n\n\nOur commitment to open source principles\n\n\nWe want to encourage and facilitate the use of our trademarks by the community,\nbut do so in a way that still ensures that the trademarks are meaningful as a\nsource and quality indicator for our software and the associated goods and\nservices and continue to embody the high reputation of the software and the\ncommunity associated with it. This Policy therefore tries to strike the proper\nbalance between: 1) our need to ensure that our trademarks remain reliable\nindicators of the qualities that they are meant to preserve and 2) our community\nmembers' desire to be full participants in the Project.\n\n\nTrademarks subject to the guidelines\n\n\nOur trademarks\n\n\nThis Policy covers:\n\n\n\n\nOur word trademarks and service marks (the \"Word Marks\"):\n\n\n\n\n\n\n\n\n\n\nMark\n\n\nCommon descriptive name for the goods or services\n\n\n\n\n\n\n\n\n\n\nfarmOS\n\n\nComputer software for use in farm planning and management\n\n\n\n\n\n\n\n\n\n\nOur logos (the \"Logos\"):\n\n\n\n\n\n\n\n\nAnd the unique visual styling of our website and packaging (the \"Trade\nDress\").\n\n\n\n\nThis Policy encompasses all trademarks and service marks, whether Word Marks,\nLogos or Trade Dress, which are collectively referred to as the \u201cMarks.\u201d Some\nMarks may not be registered, but registration does not equal ownership of\ntrademarks. This Policy covers our Marks whether they are registered or not.\n\n\nUniversal considerations for all uses\n\n\nWhenever you use one of the Marks, you must always do so in a way that does not\nmislead anyone, either directly or by omission, about exactly what they are\ngetting and from whom. The law reflects this requirement in two major ways\ndescribed in more detail below: it prohibits creating a \"likelihood of\nconfusion\" but allows for \"nominative use.\" For example, you cannot say you are\ndistributing the farmOS software when you're distributing a modified version of\nit, because people would be confused when they are not getting the same features\nand functionality they would get if they downloaded the software directly from\nus. You also cannot use our logo on your website in a way that suggests that\nyour website is an official website or that we endorse your website. You can,\nthough, say you like the farmOS software, that you participate in the farmOS\ncommunity, that you are providing an unmodified version of the farmOS software,\nor that you wrote a book describing how to use the farmOS software.\n\n\nThis fundamental requirement, that it is always clear to people what they are\ngetting and from whom, is reflected throughout this Policy. It should also serve\nas your guide if you are not sure about how you are using the Marks.\n\n\nIn addition:\n\n\n\n\nYou may not use the Marks in association with the use or distribution of\nsoftware if you are also not in compliance with the copyright license for the\nsoftware.\n\n\nYou may not use or register, in whole or in part, the Marks as part of your own\ntrademark, service mark, domain name, company name, trade name, product name or\nservice name.\n\n\nTrademark law does not allow your use of names or trademarks that are too\nsimilar to ours. You therefore may not use an obvious variation of any of our\nMarks or any phonetic equivalent, foreign language equivalent, takeoff, or\nabbreviation for a similar or compatible product or service. We would consider\nthe following too similar to one of our Marks:\n\n\nAny mark beginning or ending with the letters FARMOS\n\n\n\n\n\n\n\n\nYou agree that you will not acquire any rights in the Marks and that any\ngoodwill generated by your use of the Marks inures solely to our benefit.\n\n\nUse for software\n\n\nSee \nUniversal considerations for all uses\n, above, which also apply.\n\n\nUses we consider non-infringing\n\n\nDistribution of unmodified source code or unmodified executable code we have compiled\n\n\nWhen you redistribute an unmodified copy of our software, you are not changing\nthe quality or nature of it. Therefore, you may retain the Word Marks and the\nLogos we have placed on the software to identify your redistribution -- whether\nthat redistribution is made by optical media, memory stick or download of\nunmodified source and executable code. This kind of use only applied if you are\nredistributing an official distribution from this Project that has not been\nchanged in any way. You can find files for the Logos and approved designs for\npackaging on farmOS.org.\n\n\nDistribution of executable code that you have compiled, or modified code\n\n\nYou may use the Word Marks, but not the Logos, to truthfully describe the origin\nof the software that you are providing, that is, that the code you are\ndistributing is a modification of our software. You may say, for example, that\n\"this software is derived from the source code for farmOS software.\"\n\n\nYou will need to remove the Logo data files.\n\n\nOf course, you can place your own trademarks or logos on versions of the\nsoftware to which you have made substantive modifications, because by modifying\nthe software you have become the origin of that exact version. In that case, you\nshould not use our Logos.\n\n\nStatements about compatibility, interoperability or derivation\n\n\nYou may use the Word Marks, but not the Logos, to truthfully describe the\nrelationship between your software and ours. Our Mark should be used after a\nverb or preposition that describes the relationship between your software and\nours. So you may say, for example, \"Bob's software for the farmOS platform\" but\nmay not say \"Bob's farmOS software.\" Some other examples that may work for you\nare:\n\n\n\n\n[Your software] works with farmOS software\n\n\n[Your software] uses farmOS software\n\n\n[Your software] is compatible with farmOS software\n\n\n[Your software] is powered by farmOS software\n\n\n[Your software] runs on farmOS software\n\n\n[Your software] for use with farmOS software\n\n\n[Your software] for farmOS software\n\n\n\n\nUse of trademarks to show community affiliation\n\n\nThis section discusses the use of our Marks for software such an application\nthemes, skins and personas. The use of our Marks on websites is discussed below.\n\n\nYou may use the Word Marks and the Logos in themes, personas, or skins for\napplications to show your support for the Project, provided that the use is\nnon-commercial and the use is clearly decorative, as contrasted with a use that\nappears to be the branding for a website or application.\n\n\nUses for which we are granting a license\n\n\nDistribution of modified software\n\n\nYou may use the Word Marks and the Logos for the distribution of code (source or\nexecutable) on the condition that any executable is built from the official\nProject source code and that any modifications are limited to switching on or\noff features already included in the software, translations into other\nlanguages, and incorporating bug-fix patches.\n\n\nDistribution of software preloaded on hardware\n\n\nYou may use the Word Marks and the Logos in association with hardware devices on\nthe condition that the executable installed on the device is the official source\nexecutable for the Project, and that you do not suggest that the Project is the\nsource of the hardware device itself but rather than the Marks are for the\nsoftware incorporated into the device.\n\n\nUses we consider infringing without seeking further permission from us\n\n\nWe will likely consider using the Marks in a software distribution that combines\nour software with any other software program an infringement of our Marks. We\nwould consider your software \"combined\" with ours if you create a single\nexecutable for both software programs, as well as if by installing our software\nit automatically installs yours. We would not consider your software \"combined\"\nwith ours if it is on the same media but requires separate, independent action\nto install it.\n\n\nUse for non-software goods and services\n\n\nSee \nUniversal considerations for all uses\n, above, which also apply.\n\n\nUses we consider non-infringing\n\n\nWebsites\n\n\nYou may use the Word Marks and Logos, but not the Trade Dress, on your webpage\nto show your support for the Project as long as:\n\n\n\n\nThe website has branding that is easily distinguished from the Project Trade\nDress;\n\n\nYour own branding or naming is more prominent than any Project Marks;\n\n\nThe Logos hyperlink to the Project website;\n\n\nThe site does not mislead customers into thinking that either your website,\nservice, or product is our website, service, or product; and\n\n\nThe site clearly states that you are not affiliated with or endorsed by the\nProject.\n\n\n\n\nPublications and presentations\n\n\nYou can use the Word Marks in book and article titles, and the Logo in\nillustrations within the document, as long as the use does not suggest that we\nhave published, endorse, or agree with your work.\n\n\nEvents\n\n\nYou can use the Logo and signage from farmOS.org to promote the software and\nProject at events.\n\n\nUses for which we are granting a license\n\n\nUser groups\n\n\nYou can use the Word Marks as part of your user group name provided that:\n\n\n\n\nThe main focus of the group is the software;\n\n\nAny software or services the group provides are without cost;\n\n\nThe group does not make a profit;\n\n\nAny charge to attend meetings are to cover the cost of the venue, food and\ndrink only.\n\n\n\n\nNote that the \nUniversal considerations for all uses\n, above, still apply,\nspecifically, that you may not use or register the Marks as part of your own\ntrademark, service mark, domain name, company name, trade name, product name or\nservice name.\n\n\nPromotional goods\n\n\n\"Promotional goods\" are non-software goods that use the Marks and that are\nintended to advertise the Project, promote the Project, or show membership in\nthe Project community.\n\n\nYou may make stickers, hats, T-shirts, hoodies, and other promotional items for\nfree giveaway at open source conferences and events using only the designs found\non farmOS.org\n\n\nUses we consider infringing without seeking further permission from us\n\n\nWe will likely consider using the Marks as part of a domain name or subdomain an\ninfringement of our Marks.\n\n\nWe would likely consider using the Marks on promotional goods for sale an\ninfringement of our Marks.\n\n\nGeneral Information\n\n\nTrademark marking and legends\n\n\nThe first or most prominent mention of a Mark on a webpage, document, packaging,\nor documentation should be accompanied by a symbol indicating whether the mark\nis a registered trademark (\"\u00ae\") or an unregistered trademark (\"\u2122\"). See our Trademark List for the correct symbol to use.\n\n\nAlso, if you are using our Marks in a way described in the sections \"Uses for\nwhich we are granting a license,\" please put following notice at the foot of the\npage where you have used the Mark (or, if in a book, on the credits page), on\nany packaging or labeling, and on advertising or marketing materials:\n\n\n\"farmOS is a registered trademark of Michel Stenta\"\n\n\nWhat to do when you see abuse\n\n\nIf you are aware of any confusing use or misuse of the Marks in any way, we\nwould appreciate you bringing this to our attention. Please contact us as\ndescribed below so that we can investigate it further.\n\n\nWhere to get further information\n\n\nIf you have any questions about this Policy, would like to speak with us about\nthe use of our Marks in ways not described in the Policy, or see any abuse of\nour Marks, please \ncontact Michael Stenta\n.\n\n\nGeneral considerations about trademarks and their use\n\n\nWhat trademark law is about\n\n\nWhat is a trademark?\n\n\nA trademark is a word, phrase, symbol or design, or a combination of words,\nphrases, symbols or designs, that identifies and distinguishes the source of the\ngoods of one party from those of others. A service mark is the same as a\ntrademark, except that it identifies and distinguishes the source of a service\nrather than a product. \"Trade dress\" or \"get up\" refers to the look and feel of\nthe packaging, which in this context can include the layout, colors, images, and\ndesign choices in a web page. Throughout this Policy, the terms \"trademark\" and\n\"mark\" refer to both trademarks, service marks and trade dress.\n\n\nHowever, the use of a word is \"not as a trademark\" when it is used functionally\nas part of the software program, for example, in a file, folder, directory, or\npath name. Use in this way is not a trademark infringement.\n\n\nWhat is \"likelihood of confusion\"?\n\n\nThere is trademark infringement if your use of a trademark has created a\n\"likelihood of confusion.\" This means using a trademark in a way that will\nlikely confuse or deceive the relevant consuming public about the source of a\nproduct or service using the mark in question. For example, if the \"Foo\"\nsoftware extension removes all double spaces after periods, but someone else\nlater creates \"Foo\" software that adds a third space after periods, consumers\nwould be confused between the two and the newcomer will likely be a trademark\ninfringer. As another example, if a company makes \"Foobar\" software and a third\nparty offers training called \"Foobar Certification,\" a person is likely to\nbelieve, wrongly, that the certification is being offered by the makers of\nFoobar software. The third party has likely misled consumers about the source of\nits training and is a trademark infringer.\n\n\nWhat is \"nominative\" use?\n\n\nSo-called \"nominative use\" (or \"nominative fair use\"), which is the name of the\ndoctrine under U.S. trademark law, allows the use of another's trademark where\nit is necessary for understanding. Other countries' trademark laws also have\nsimilar provisions. For example, a car repair shop that specializes in a\nparticular brand of automobile, VW for example, must be allowed to say that they\nrepair VW cars. Here is what you should consider when deciding whether your use\nof a trademark is a nominative fair use:\n\n\n\n\nWhether you can identify the product or service in question without using the\ntrademark;\n\n\nWhether you are avoiding a likelihood of confusion in the way that you have\nused the trademark; and\n\n\nWhether you have used only as much as is necessary to identify the product or\nservice.\n\n\n\n\nWith our \"Foobar Certification\" example above, the person offering the\ncertification would be allowed to say, under the nominative fair use doctrine,\nthat she is offering \"Maude's Certification for Foobar software.\"\n\n\nIt is almost never the case that using a Logo will be a nominative fair use\nsince it will be a rare case where the logo is needed for strictly informational\npurposes.\n\n\nProper trademark use\n\n\nThese rules hold true for all trademarks, not just ours, so you should follow\nthem for our Marks as well as anyone else's.\n\n\nUse of trademarks in text\n\n\nAlways distinguish trademarks from surrounding text with at least initial\ncapital letters or in all capital letters.\n\n\nNote that with the farmOS mark, an exception is made in that the first letter\ncan be lowercase, but \"OS\" must be capitalized.\n\n\n\n\nUnacceptable: farmos\n\n\nAcceptable: FarmOS, FARMOS, farmOS\n\n\n\n\nAlways use trademarks in their exact form with the correct spelling, neither\nabbreviated, hyphenated, or combined with any other word or words.\n\n\n\n\nUnacceptable: Farm OS, farm-OS\n\n\nAcceptable: farmOS\n\n\n\n\nDon't pluralize a trademark.\n\n\n\n\nUnacceptable: I have seventeen farmOSes running on my farm.\n\n\nAcceptable: I have seventeen farmOS instances running on my farm.\n\n\n\n\nDon't use \"a\" or \"the\" to refer to an instance of the trademark.\n\n\n\n\nUnacceptable: I put a farmOS on my mom's computer.\n\n\nAcceptable: I put a farmOS instance on my mom's computer.\n\n\n\n\nAlways use a trademark as an adjective modifying a noun. You can see the nouns\nwe prefer under \"Our trademarks.\"\n\n\n\n\nUnacceptable: This is a farmOS. Anyone can install it.\n\n\nAcceptable: This is a farmOS application. Anyone can install it.\n\n\n\n\nDon't use a trademark as a verb. Trademarks are products or services, never\nactions.\n\n\n\n\nUnacceptable: I farmOSed my computer today!\n\n\nAcceptable: I installed farmOS on my computer today!\n\n\n\n\nDon't use a trademark as a possessive. Instead, the following noun should be\nused in possessive form or the sentence reworded so there is no possessive.\n\n\n\n\nUnacceptable: farmOS's interface is very clean.\n\n\nAcceptable: The farmOS dashboard's interface is very clean.\n\n\n\n\nDon't translate a trademark into another language.\n\n\n\n\nAcceptable: Quiero instalar farmOS en mi sistema.\n\n\nUnacceptable: Quiero instalar granjaOS en mi sistema.\n\n\n\n\nUse of Logos\n\n\nYou may not change any Logo except to scale it. This means you may not add\ndecorative elements, change the colors, change the proportions, distort it, add\nelements, or combine it with other logos.\n\n\nHowever, when the context requires the use of black-and-white graphics and the\nlogo is color, you may reproduce the logo in a manner that produces a\nblack-and-white image.\n\n\n\n\nThese guidelines are based on the Model Trademark Guidelines, available at \n\nhttp://www.modeltrademarkguidelines.org\n, used under a Creative Commons\nAttribution 3.0 Unported license:\n\nhttps://creativecommons.org/licenses/by/3.0/deed.en_US", 
            "title": "Trademark"
        }, 
        {
            "location": "/community/trademark/#farmos-trademark-guidelines", 
            "text": "Version 1.0, November 2016", 
            "title": "farmOS Trademark Guidelines"
        }, 
        {
            "location": "/community/trademark/#introduction", 
            "text": "This document, the \"Policy,\" outlines the farmOS project's (the \"Project\")\npolicy for the use of our trademarks. While our software is available under a\nfree and open source software license, the copyright license does not include an\nimplied right or license to use our trademark.  The role of trademarks is to provide assurance about the quality of the products\nor services with which the trademark is associated. But because an open source\nlicense allows your unrestricted modification of the copyrighted software, we\ncannot be sure that your modifications to the software are ones that will not be\nmisleading if distributed under the same name. Instead, this Policy describes\nthe circumstances under which you may use our trademarks.  In this Policy we are not trying to limit the lawful use of our trademarks, but\nrather describe for you what we consider the parameters of lawful use to be.\nTrademark law can be ambiguous, so we hope to provide enough clarity for you to\nunderstand whether we will consider your use licensed or non-infringing.  The sections that follow describe what trademarks are covered by this Policy, as\nwell as uses of the trademarks that are allowed without additional permission\nfrom us. If you want to use our trademarks in ways that are not described in\nthis Policy, please see \"Where to get further information\" below for contact\ninformation. Any use that does not comply with this Policy or for which we have\nnot separately provided written permission is not a use that we have approved,\nso you must decide for yourself whether the use is nevertheless lawful.", 
            "title": "Introduction"
        }, 
        {
            "location": "/community/trademark/#our-commitment-to-open-source-principles", 
            "text": "We want to encourage and facilitate the use of our trademarks by the community,\nbut do so in a way that still ensures that the trademarks are meaningful as a\nsource and quality indicator for our software and the associated goods and\nservices and continue to embody the high reputation of the software and the\ncommunity associated with it. This Policy therefore tries to strike the proper\nbalance between: 1) our need to ensure that our trademarks remain reliable\nindicators of the qualities that they are meant to preserve and 2) our community\nmembers' desire to be full participants in the Project.", 
            "title": "Our commitment to open source principles"
        }, 
        {
            "location": "/community/trademark/#trademarks-subject-to-the-guidelines", 
            "text": "", 
            "title": "Trademarks subject to the guidelines"
        }, 
        {
            "location": "/community/trademark/#our-trademarks", 
            "text": "This Policy covers:   Our word trademarks and service marks (the \"Word Marks\"):      Mark  Common descriptive name for the goods or services      farmOS  Computer software for use in farm planning and management      Our logos (the \"Logos\"):     And the unique visual styling of our website and packaging (the \"Trade\nDress\").   This Policy encompasses all trademarks and service marks, whether Word Marks,\nLogos or Trade Dress, which are collectively referred to as the \u201cMarks.\u201d Some\nMarks may not be registered, but registration does not equal ownership of\ntrademarks. This Policy covers our Marks whether they are registered or not.", 
            "title": "Our trademarks"
        }, 
        {
            "location": "/community/trademark/#universal-considerations-for-all-uses", 
            "text": "Whenever you use one of the Marks, you must always do so in a way that does not\nmislead anyone, either directly or by omission, about exactly what they are\ngetting and from whom. The law reflects this requirement in two major ways\ndescribed in more detail below: it prohibits creating a \"likelihood of\nconfusion\" but allows for \"nominative use.\" For example, you cannot say you are\ndistributing the farmOS software when you're distributing a modified version of\nit, because people would be confused when they are not getting the same features\nand functionality they would get if they downloaded the software directly from\nus. You also cannot use our logo on your website in a way that suggests that\nyour website is an official website or that we endorse your website. You can,\nthough, say you like the farmOS software, that you participate in the farmOS\ncommunity, that you are providing an unmodified version of the farmOS software,\nor that you wrote a book describing how to use the farmOS software.  This fundamental requirement, that it is always clear to people what they are\ngetting and from whom, is reflected throughout this Policy. It should also serve\nas your guide if you are not sure about how you are using the Marks.  In addition:   You may not use the Marks in association with the use or distribution of\nsoftware if you are also not in compliance with the copyright license for the\nsoftware.  You may not use or register, in whole or in part, the Marks as part of your own\ntrademark, service mark, domain name, company name, trade name, product name or\nservice name.  Trademark law does not allow your use of names or trademarks that are too\nsimilar to ours. You therefore may not use an obvious variation of any of our\nMarks or any phonetic equivalent, foreign language equivalent, takeoff, or\nabbreviation for a similar or compatible product or service. We would consider\nthe following too similar to one of our Marks:  Any mark beginning or ending with the letters FARMOS     You agree that you will not acquire any rights in the Marks and that any\ngoodwill generated by your use of the Marks inures solely to our benefit.", 
            "title": "Universal considerations for all uses"
        }, 
        {
            "location": "/community/trademark/#use-for-software", 
            "text": "See  Universal considerations for all uses , above, which also apply.", 
            "title": "Use for software"
        }, 
        {
            "location": "/community/trademark/#uses-we-consider-non-infringing", 
            "text": "", 
            "title": "Uses we consider non-infringing"
        }, 
        {
            "location": "/community/trademark/#distribution-of-unmodified-source-code-or-unmodified-executable-code-we-have-compiled", 
            "text": "When you redistribute an unmodified copy of our software, you are not changing\nthe quality or nature of it. Therefore, you may retain the Word Marks and the\nLogos we have placed on the software to identify your redistribution -- whether\nthat redistribution is made by optical media, memory stick or download of\nunmodified source and executable code. This kind of use only applied if you are\nredistributing an official distribution from this Project that has not been\nchanged in any way. You can find files for the Logos and approved designs for\npackaging on farmOS.org.", 
            "title": "Distribution of unmodified source code or unmodified executable code we have compiled"
        }, 
        {
            "location": "/community/trademark/#distribution-of-executable-code-that-you-have-compiled-or-modified-code", 
            "text": "You may use the Word Marks, but not the Logos, to truthfully describe the origin\nof the software that you are providing, that is, that the code you are\ndistributing is a modification of our software. You may say, for example, that\n\"this software is derived from the source code for farmOS software.\"  You will need to remove the Logo data files.  Of course, you can place your own trademarks or logos on versions of the\nsoftware to which you have made substantive modifications, because by modifying\nthe software you have become the origin of that exact version. In that case, you\nshould not use our Logos.", 
            "title": "Distribution of executable code that you have compiled, or modified code"
        }, 
        {
            "location": "/community/trademark/#statements-about-compatibility-interoperability-or-derivation", 
            "text": "You may use the Word Marks, but not the Logos, to truthfully describe the\nrelationship between your software and ours. Our Mark should be used after a\nverb or preposition that describes the relationship between your software and\nours. So you may say, for example, \"Bob's software for the farmOS platform\" but\nmay not say \"Bob's farmOS software.\" Some other examples that may work for you\nare:   [Your software] works with farmOS software  [Your software] uses farmOS software  [Your software] is compatible with farmOS software  [Your software] is powered by farmOS software  [Your software] runs on farmOS software  [Your software] for use with farmOS software  [Your software] for farmOS software", 
            "title": "Statements about compatibility, interoperability or derivation"
        }, 
        {
            "location": "/community/trademark/#use-of-trademarks-to-show-community-affiliation", 
            "text": "This section discusses the use of our Marks for software such an application\nthemes, skins and personas. The use of our Marks on websites is discussed below.  You may use the Word Marks and the Logos in themes, personas, or skins for\napplications to show your support for the Project, provided that the use is\nnon-commercial and the use is clearly decorative, as contrasted with a use that\nappears to be the branding for a website or application.", 
            "title": "Use of trademarks to show community affiliation"
        }, 
        {
            "location": "/community/trademark/#uses-for-which-we-are-granting-a-license", 
            "text": "", 
            "title": "Uses for which we are granting a license"
        }, 
        {
            "location": "/community/trademark/#distribution-of-modified-software", 
            "text": "You may use the Word Marks and the Logos for the distribution of code (source or\nexecutable) on the condition that any executable is built from the official\nProject source code and that any modifications are limited to switching on or\noff features already included in the software, translations into other\nlanguages, and incorporating bug-fix patches.", 
            "title": "Distribution of modified software"
        }, 
        {
            "location": "/community/trademark/#distribution-of-software-preloaded-on-hardware", 
            "text": "You may use the Word Marks and the Logos in association with hardware devices on\nthe condition that the executable installed on the device is the official source\nexecutable for the Project, and that you do not suggest that the Project is the\nsource of the hardware device itself but rather than the Marks are for the\nsoftware incorporated into the device.", 
            "title": "Distribution of software preloaded on hardware"
        }, 
        {
            "location": "/community/trademark/#uses-we-consider-infringing-without-seeking-further-permission-from-us", 
            "text": "We will likely consider using the Marks in a software distribution that combines\nour software with any other software program an infringement of our Marks. We\nwould consider your software \"combined\" with ours if you create a single\nexecutable for both software programs, as well as if by installing our software\nit automatically installs yours. We would not consider your software \"combined\"\nwith ours if it is on the same media but requires separate, independent action\nto install it.", 
            "title": "Uses we consider infringing without seeking further permission from us"
        }, 
        {
            "location": "/community/trademark/#use-for-non-software-goods-and-services", 
            "text": "See  Universal considerations for all uses , above, which also apply.", 
            "title": "Use for non-software goods and services"
        }, 
        {
            "location": "/community/trademark/#uses-we-consider-non-infringing_1", 
            "text": "", 
            "title": "Uses we consider non-infringing"
        }, 
        {
            "location": "/community/trademark/#websites", 
            "text": "You may use the Word Marks and Logos, but not the Trade Dress, on your webpage\nto show your support for the Project as long as:   The website has branding that is easily distinguished from the Project Trade\nDress;  Your own branding or naming is more prominent than any Project Marks;  The Logos hyperlink to the Project website;  The site does not mislead customers into thinking that either your website,\nservice, or product is our website, service, or product; and  The site clearly states that you are not affiliated with or endorsed by the\nProject.", 
            "title": "Websites"
        }, 
        {
            "location": "/community/trademark/#publications-and-presentations", 
            "text": "You can use the Word Marks in book and article titles, and the Logo in\nillustrations within the document, as long as the use does not suggest that we\nhave published, endorse, or agree with your work.", 
            "title": "Publications and presentations"
        }, 
        {
            "location": "/community/trademark/#events", 
            "text": "You can use the Logo and signage from farmOS.org to promote the software and\nProject at events.", 
            "title": "Events"
        }, 
        {
            "location": "/community/trademark/#uses-for-which-we-are-granting-a-license_1", 
            "text": "", 
            "title": "Uses for which we are granting a license"
        }, 
        {
            "location": "/community/trademark/#user-groups", 
            "text": "You can use the Word Marks as part of your user group name provided that:   The main focus of the group is the software;  Any software or services the group provides are without cost;  The group does not make a profit;  Any charge to attend meetings are to cover the cost of the venue, food and\ndrink only.   Note that the  Universal considerations for all uses , above, still apply,\nspecifically, that you may not use or register the Marks as part of your own\ntrademark, service mark, domain name, company name, trade name, product name or\nservice name.", 
            "title": "User groups"
        }, 
        {
            "location": "/community/trademark/#promotional-goods", 
            "text": "\"Promotional goods\" are non-software goods that use the Marks and that are\nintended to advertise the Project, promote the Project, or show membership in\nthe Project community.  You may make stickers, hats, T-shirts, hoodies, and other promotional items for\nfree giveaway at open source conferences and events using only the designs found\non farmOS.org", 
            "title": "Promotional goods"
        }, 
        {
            "location": "/community/trademark/#uses-we-consider-infringing-without-seeking-further-permission-from-us_1", 
            "text": "We will likely consider using the Marks as part of a domain name or subdomain an\ninfringement of our Marks.  We would likely consider using the Marks on promotional goods for sale an\ninfringement of our Marks.", 
            "title": "Uses we consider infringing without seeking further permission from us"
        }, 
        {
            "location": "/community/trademark/#general-information", 
            "text": "", 
            "title": "General Information"
        }, 
        {
            "location": "/community/trademark/#trademark-marking-and-legends", 
            "text": "The first or most prominent mention of a Mark on a webpage, document, packaging,\nor documentation should be accompanied by a symbol indicating whether the mark\nis a registered trademark (\"\u00ae\") or an unregistered trademark (\"\u2122\"). See our Trademark List for the correct symbol to use.  Also, if you are using our Marks in a way described in the sections \"Uses for\nwhich we are granting a license,\" please put following notice at the foot of the\npage where you have used the Mark (or, if in a book, on the credits page), on\nany packaging or labeling, and on advertising or marketing materials:  \"farmOS is a registered trademark of Michel Stenta\"", 
            "title": "Trademark marking and legends"
        }, 
        {
            "location": "/community/trademark/#what-to-do-when-you-see-abuse", 
            "text": "If you are aware of any confusing use or misuse of the Marks in any way, we\nwould appreciate you bringing this to our attention. Please contact us as\ndescribed below so that we can investigate it further.", 
            "title": "What to do when you see abuse"
        }, 
        {
            "location": "/community/trademark/#where-to-get-further-information", 
            "text": "If you have any questions about this Policy, would like to speak with us about\nthe use of our Marks in ways not described in the Policy, or see any abuse of\nour Marks, please  contact Michael Stenta .", 
            "title": "Where to get further information"
        }, 
        {
            "location": "/community/trademark/#general-considerations-about-trademarks-and-their-use", 
            "text": "", 
            "title": "General considerations about trademarks and their use"
        }, 
        {
            "location": "/community/trademark/#what-trademark-law-is-about", 
            "text": "", 
            "title": "What trademark law is about"
        }, 
        {
            "location": "/community/trademark/#what-is-a-trademark", 
            "text": "A trademark is a word, phrase, symbol or design, or a combination of words,\nphrases, symbols or designs, that identifies and distinguishes the source of the\ngoods of one party from those of others. A service mark is the same as a\ntrademark, except that it identifies and distinguishes the source of a service\nrather than a product. \"Trade dress\" or \"get up\" refers to the look and feel of\nthe packaging, which in this context can include the layout, colors, images, and\ndesign choices in a web page. Throughout this Policy, the terms \"trademark\" and\n\"mark\" refer to both trademarks, service marks and trade dress.  However, the use of a word is \"not as a trademark\" when it is used functionally\nas part of the software program, for example, in a file, folder, directory, or\npath name. Use in this way is not a trademark infringement.", 
            "title": "What is a trademark?"
        }, 
        {
            "location": "/community/trademark/#what-is-likelihood-of-confusion", 
            "text": "There is trademark infringement if your use of a trademark has created a\n\"likelihood of confusion.\" This means using a trademark in a way that will\nlikely confuse or deceive the relevant consuming public about the source of a\nproduct or service using the mark in question. For example, if the \"Foo\"\nsoftware extension removes all double spaces after periods, but someone else\nlater creates \"Foo\" software that adds a third space after periods, consumers\nwould be confused between the two and the newcomer will likely be a trademark\ninfringer. As another example, if a company makes \"Foobar\" software and a third\nparty offers training called \"Foobar Certification,\" a person is likely to\nbelieve, wrongly, that the certification is being offered by the makers of\nFoobar software. The third party has likely misled consumers about the source of\nits training and is a trademark infringer.", 
            "title": "What is \"likelihood of confusion\"?"
        }, 
        {
            "location": "/community/trademark/#what-is-nominative-use", 
            "text": "So-called \"nominative use\" (or \"nominative fair use\"), which is the name of the\ndoctrine under U.S. trademark law, allows the use of another's trademark where\nit is necessary for understanding. Other countries' trademark laws also have\nsimilar provisions. For example, a car repair shop that specializes in a\nparticular brand of automobile, VW for example, must be allowed to say that they\nrepair VW cars. Here is what you should consider when deciding whether your use\nof a trademark is a nominative fair use:   Whether you can identify the product or service in question without using the\ntrademark;  Whether you are avoiding a likelihood of confusion in the way that you have\nused the trademark; and  Whether you have used only as much as is necessary to identify the product or\nservice.   With our \"Foobar Certification\" example above, the person offering the\ncertification would be allowed to say, under the nominative fair use doctrine,\nthat she is offering \"Maude's Certification for Foobar software.\"  It is almost never the case that using a Logo will be a nominative fair use\nsince it will be a rare case where the logo is needed for strictly informational\npurposes.", 
            "title": "What is \"nominative\" use?"
        }, 
        {
            "location": "/community/trademark/#proper-trademark-use", 
            "text": "These rules hold true for all trademarks, not just ours, so you should follow\nthem for our Marks as well as anyone else's.", 
            "title": "Proper trademark use"
        }, 
        {
            "location": "/community/trademark/#use-of-trademarks-in-text", 
            "text": "Always distinguish trademarks from surrounding text with at least initial\ncapital letters or in all capital letters.  Note that with the farmOS mark, an exception is made in that the first letter\ncan be lowercase, but \"OS\" must be capitalized.   Unacceptable: farmos  Acceptable: FarmOS, FARMOS, farmOS   Always use trademarks in their exact form with the correct spelling, neither\nabbreviated, hyphenated, or combined with any other word or words.   Unacceptable: Farm OS, farm-OS  Acceptable: farmOS   Don't pluralize a trademark.   Unacceptable: I have seventeen farmOSes running on my farm.  Acceptable: I have seventeen farmOS instances running on my farm.   Don't use \"a\" or \"the\" to refer to an instance of the trademark.   Unacceptable: I put a farmOS on my mom's computer.  Acceptable: I put a farmOS instance on my mom's computer.   Always use a trademark as an adjective modifying a noun. You can see the nouns\nwe prefer under \"Our trademarks.\"   Unacceptable: This is a farmOS. Anyone can install it.  Acceptable: This is a farmOS application. Anyone can install it.   Don't use a trademark as a verb. Trademarks are products or services, never\nactions.   Unacceptable: I farmOSed my computer today!  Acceptable: I installed farmOS on my computer today!   Don't use a trademark as a possessive. Instead, the following noun should be\nused in possessive form or the sentence reworded so there is no possessive.   Unacceptable: farmOS's interface is very clean.  Acceptable: The farmOS dashboard's interface is very clean.   Don't translate a trademark into another language.   Acceptable: Quiero instalar farmOS en mi sistema.  Unacceptable: Quiero instalar granjaOS en mi sistema.", 
            "title": "Use of trademarks in text"
        }, 
        {
            "location": "/community/trademark/#use-of-logos", 
            "text": "You may not change any Logo except to scale it. This means you may not add\ndecorative elements, change the colors, change the proportions, distort it, add\nelements, or combine it with other logos.  However, when the context requires the use of black-and-white graphics and the\nlogo is color, you may reproduce the logo in a manner that produces a\nblack-and-white image.   These guidelines are based on the Model Trademark Guidelines, available at  http://www.modeltrademarkguidelines.org , used under a Creative Commons\nAttribution 3.0 Unported license: https://creativecommons.org/licenses/by/3.0/deed.en_US", 
            "title": "Use of Logos"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nWhat is farmOS?\n\n\n\n\nWhat is the farmOS software used for?\n\n\n\n\nfarmOS is a web-based application for agricultural management, planning, and\nrecord keeping.\n\n\nWho is using farmOS?\n\n\n\n\nAre there a lot of farms using farmOS?\n\n\n\n\nA brief list of farms that are using farmOS is available here:\n\nFarms using farmOS\n. Anyone using farmOS can add their farm's name to this\nlist.\n\n\nYou can also refer to the \nDrupal.org Usage Statistics\n for farmOS, which shows\nhow many active farmOS installations are out there in the wild. Note that this\nonly includes installations that have their \"Update\" module enabled.\n\n\nHow do I use farmOS?\n\n\n\n\nHow do I start using farmOS?\n\n\n\n\nRefer to the \nUser Guide\n to get started with farmOS.\n\n\n\n\nDoes farmOS cost money?\n\n\n\n\nThe farmOS software itself is free. Hosting the software on a web server so that\nyou can access it from anywhere requires paying for web hosting.\n\n\nLow-cost farmOS hosting is available through \nFarmier\n.\n\n\n\n\nCan I use farmOS on my laptop/desktop/phone/tablet?\n\n\n\n\nYes! farmOS is a web application, which means it runs on any device that has a\nweb browser.\n\n\nIt uses the \nBootstrap framework\n to ensure that it looks good on screen sizes\nbig and small.\n\n\n\n\nDo I need internet access to use farmOS?\n\n\n\n\nIn general: yes. farmOS uses Google Maps for its map base layers, which require\nan internet connection to access. And in most cases you will want to host your\nfarmOS installation on a web server so that it is accessible to everyone who\nneeds to use it.\n\n\nWith a little ingenuity, however, it should be possible to run farmOS locally,\nwith your own web server and locally hosted map tiles. You could be the first\nto try it! If you do, please share your experience so the rest of the farmOS\ncommunity can learn along with you!\n\n\n\n\nWho owns the data that I enter into farmOS?\n\n\n\n\nYou do. farmOS is not owned by any single group or individual, so neither is\nyour data. You also have full access to the code that is storing and using that\ndata! Why? Because farmOS is free open source software developed by a community\nof farmOS users.\n\n\nWhere can I find news?\n\n\n\n\nWhere are farmOS development updates posted?\n\n\n\n\nEach version of farmOS is released with a set of \nrelease notes\n that describe\nall of the changes included in the release, with links to detailed descriptions\nand community discussions.\n\n\nWhen farmOS is mentioned in the media, a link is added to the \nPress\n page.\n\n\nUpdates on farmOS development are also available on the Farmier \nBlog\n and\n\nTwitter\n account. \nFarmier\n is run by the lead developer of farmOS.\n\n\nWhy farmOS?\n\n\n\n\nWhy was the farmOS project started in the first place?\n\n\n\n\nEric S. Raymond\n's first main point in \nThe Cathedral and the Bazaar\n answers\nthis question well:\n\n\n\n\n\n\nEvery good work of software starts by scratching a developer's personal\nitch.\n\n\n\n\n\n\nfarmOS started as a hobby project for farm mapping, planning, and record\nkeeping. It served to fill a gap in the existing software, and provide a\ngeneralized platform that other developers could build upon.\n\n\nIt is now available for free as \nopen source software\n.\n\n\nWhy open source?\n\n\n\n\nWhy was farmOS released under an open source license?\n\n\n\n\nfarmOS is built from many other open source projects - so it is only natural for\nit to be licensed similarly. Anyone can view the code, contribute features, and\nfix bugs.There is a benefit to working together on software.\n\n\n\n\nWhat license is farmOS released under?\n\n\n\n\nAs an extension of the \nDrupal\n project, farmOS is licensed under the\n\nGNU General Public License (GPL) v2+\n.\n\n\n\n\nWho owns the copyright to farmOS?\n\n\n\n\nSimilar to Drupal, all farmOS contributors retain copyright on their code, but\nagree to release it under the same license as Drupal and farmOS. If you are\nunable or unwilling to contribute a patch under the GPL version 2 or later, do\nnot submit a patch.\n\n\n\n\nWho owns the farmOS trademark?\n\n\n\n\nfarmOS is a registered trademark of \nMichael Stenta\n. For more information on\nthe farmOS tradmark and acceptable usage, refer to the\n\nfarmOS Trademark Guidelines\n.\n\n\nWhy Drupal?\n\n\n\n\nWhy was farmOS built on Drupal?\n\n\n\n\nDrupal is one of the most widely used open source web application frameworks,\npowering some of the largest websites on the internet. It has a huge community\nof users and developers who continue to push it forward, completely independent\nof farmOS.\n\n\nDrupal's core functionality can be extended with add-on modules. This means that\nnew farmOS modules can be written to meet very specific requirements, and users\ncan choose which modules they need and which they don't. For example, if you\ngrow crops but you do not raise livestock, you can enable the Crop module, but\nleave the Livestock module turned off. Or if you are using a specific type of\nsensor to collect environmental data, you can turn on a module that is\nspecifically made for that sensor. New modules can be written by any developer\nwho understands Drupal.\n\n\nIt is also possible to build a lot of things directly in the Drupal user\ninterface, without writing any code. The \nViews\n and \nRules\n modules are two\ngreat examples of this. A lot of the modules that come with farmOS are built as\n\nFeatures\n, which is a module that automatically builds new modules! And we\ncan't forget the \nOpenlayers\n module, which is used to build all the maps.\n\n\nAside from flexibility, security is also a big priority in the Drupal\ncommunity. Drupal sites can have multiple user logins, each with an assigned\nrole and permissions. This allows very fine-grained access control. farmOS uses\nthis to provide its own set of \nroles and permissions\n.\n\n\nLast but not least: \ninternationalization and localization\n. Drupal is used\nworldwide, and it provides infrastructure to translate farmOS into any language.\nAnyone can contribute translations, and they can be shared with the rest of the\nfarmOS community. If you are interested in contributing a translation in your\nlanguage, open an issue in the \nissue queues\n and let's get started!\n\n\n\n\nWhy isn't this website (farmOS.org) built with Drupal?\n\n\n\n\nThe first iteration of the farmOS.org site \nwas\n built in Drupal, and was hosted\nby \nFarmier\n. Currently, farmOS.org is written in simple \nMarkdown\n, built with\n\nMkdocs\n, and hosted by \nGitHub\n. We decided to do this for a few reasons:\n\n\n1. Keep things simple.\n\n\nfarmOS.org is not a dynamic website. It serves as a portal into the farmOS\ncommunity and documentation. All project management, discussion, and issue\ntracking takes place on Drupal.org (which \nis\n powered by Drupal).\n\n\nWill that change in the future? Maybe! But this works great for now.\n\n\n2. Markdown is easy.\n\n\nMarkdown is basically plain-text, which makes it really easy to read and\nunderstand, even in its raw form. And because it is stored in simple text files,\nchanges can be easily tracked in source control (\nGit\n).\n\n\nIt also lowers the barrier to contributors who want to help write documentation.\nAnyone can suggest changes to the content of this site, simply by \nforking\n the\nfarmOS.org repository on GitHub, making changes to their fork, and then creating\na pull request to have them included in the original repository.\n\n\n3. Hosting on GitHub is free.\n\n\nGitHub provides free hosting of static websites through their \nGitHub Pages\n\nservice. Bonus!", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#what-is-farmos", 
            "text": "What is the farmOS software used for?   farmOS is a web-based application for agricultural management, planning, and\nrecord keeping.", 
            "title": "What is farmOS?"
        }, 
        {
            "location": "/faq/#who-is-using-farmos", 
            "text": "Are there a lot of farms using farmOS?   A brief list of farms that are using farmOS is available here: Farms using farmOS . Anyone using farmOS can add their farm's name to this\nlist.  You can also refer to the  Drupal.org Usage Statistics  for farmOS, which shows\nhow many active farmOS installations are out there in the wild. Note that this\nonly includes installations that have their \"Update\" module enabled.", 
            "title": "Who is using farmOS?"
        }, 
        {
            "location": "/faq/#how-do-i-use-farmos", 
            "text": "How do I start using farmOS?   Refer to the  User Guide  to get started with farmOS.   Does farmOS cost money?   The farmOS software itself is free. Hosting the software on a web server so that\nyou can access it from anywhere requires paying for web hosting.  Low-cost farmOS hosting is available through  Farmier .   Can I use farmOS on my laptop/desktop/phone/tablet?   Yes! farmOS is a web application, which means it runs on any device that has a\nweb browser.  It uses the  Bootstrap framework  to ensure that it looks good on screen sizes\nbig and small.   Do I need internet access to use farmOS?   In general: yes. farmOS uses Google Maps for its map base layers, which require\nan internet connection to access. And in most cases you will want to host your\nfarmOS installation on a web server so that it is accessible to everyone who\nneeds to use it.  With a little ingenuity, however, it should be possible to run farmOS locally,\nwith your own web server and locally hosted map tiles. You could be the first\nto try it! If you do, please share your experience so the rest of the farmOS\ncommunity can learn along with you!   Who owns the data that I enter into farmOS?   You do. farmOS is not owned by any single group or individual, so neither is\nyour data. You also have full access to the code that is storing and using that\ndata! Why? Because farmOS is free open source software developed by a community\nof farmOS users.", 
            "title": "How do I use farmOS?"
        }, 
        {
            "location": "/faq/#where-can-i-find-news", 
            "text": "Where are farmOS development updates posted?   Each version of farmOS is released with a set of  release notes  that describe\nall of the changes included in the release, with links to detailed descriptions\nand community discussions.  When farmOS is mentioned in the media, a link is added to the  Press  page.  Updates on farmOS development are also available on the Farmier  Blog  and Twitter  account.  Farmier  is run by the lead developer of farmOS.", 
            "title": "Where can I find news?"
        }, 
        {
            "location": "/faq/#why-farmos", 
            "text": "Why was the farmOS project started in the first place?   Eric S. Raymond 's first main point in  The Cathedral and the Bazaar  answers\nthis question well:    Every good work of software starts by scratching a developer's personal\nitch.    farmOS started as a hobby project for farm mapping, planning, and record\nkeeping. It served to fill a gap in the existing software, and provide a\ngeneralized platform that other developers could build upon.  It is now available for free as  open source software .", 
            "title": "Why farmOS?"
        }, 
        {
            "location": "/faq/#why-open-source", 
            "text": "Why was farmOS released under an open source license?   farmOS is built from many other open source projects - so it is only natural for\nit to be licensed similarly. Anyone can view the code, contribute features, and\nfix bugs.There is a benefit to working together on software.   What license is farmOS released under?   As an extension of the  Drupal  project, farmOS is licensed under the GNU General Public License (GPL) v2+ .   Who owns the copyright to farmOS?   Similar to Drupal, all farmOS contributors retain copyright on their code, but\nagree to release it under the same license as Drupal and farmOS. If you are\nunable or unwilling to contribute a patch under the GPL version 2 or later, do\nnot submit a patch.   Who owns the farmOS trademark?   farmOS is a registered trademark of  Michael Stenta . For more information on\nthe farmOS tradmark and acceptable usage, refer to the farmOS Trademark Guidelines .", 
            "title": "Why open source?"
        }, 
        {
            "location": "/faq/#why-drupal", 
            "text": "Why was farmOS built on Drupal?   Drupal is one of the most widely used open source web application frameworks,\npowering some of the largest websites on the internet. It has a huge community\nof users and developers who continue to push it forward, completely independent\nof farmOS.  Drupal's core functionality can be extended with add-on modules. This means that\nnew farmOS modules can be written to meet very specific requirements, and users\ncan choose which modules they need and which they don't. For example, if you\ngrow crops but you do not raise livestock, you can enable the Crop module, but\nleave the Livestock module turned off. Or if you are using a specific type of\nsensor to collect environmental data, you can turn on a module that is\nspecifically made for that sensor. New modules can be written by any developer\nwho understands Drupal.  It is also possible to build a lot of things directly in the Drupal user\ninterface, without writing any code. The  Views  and  Rules  modules are two\ngreat examples of this. A lot of the modules that come with farmOS are built as Features , which is a module that automatically builds new modules! And we\ncan't forget the  Openlayers  module, which is used to build all the maps.  Aside from flexibility, security is also a big priority in the Drupal\ncommunity. Drupal sites can have multiple user logins, each with an assigned\nrole and permissions. This allows very fine-grained access control. farmOS uses\nthis to provide its own set of  roles and permissions .  Last but not least:  internationalization and localization . Drupal is used\nworldwide, and it provides infrastructure to translate farmOS into any language.\nAnyone can contribute translations, and they can be shared with the rest of the\nfarmOS community. If you are interested in contributing a translation in your\nlanguage, open an issue in the  issue queues  and let's get started!   Why isn't this website (farmOS.org) built with Drupal?   The first iteration of the farmOS.org site  was  built in Drupal, and was hosted\nby  Farmier . Currently, farmOS.org is written in simple  Markdown , built with Mkdocs , and hosted by  GitHub . We decided to do this for a few reasons:  1. Keep things simple.  farmOS.org is not a dynamic website. It serves as a portal into the farmOS\ncommunity and documentation. All project management, discussion, and issue\ntracking takes place on Drupal.org (which  is  powered by Drupal).  Will that change in the future? Maybe! But this works great for now.  2. Markdown is easy.  Markdown is basically plain-text, which makes it really easy to read and\nunderstand, even in its raw form. And because it is stored in simple text files,\nchanges can be easily tracked in source control ( Git ).  It also lowers the barrier to contributors who want to help write documentation.\nAnyone can suggest changes to the content of this site, simply by  forking  the\nfarmOS.org repository on GitHub, making changes to their fork, and then creating\na pull request to have them included in the original repository.  3. Hosting on GitHub is free.  GitHub provides free hosting of static websites through their  GitHub Pages \nservice. Bonus!", 
            "title": "Why Drupal?"
        }
    ]
}